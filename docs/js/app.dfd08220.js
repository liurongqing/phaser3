!function(e){var n={};function a(t){if(n[t])return n[t].exports;var s=n[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=e,a.c=n,a.d=function(e,n,t){a.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,n){if(1&n&&(e=a(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)a.d(t,s,function(n){return e[n]}.bind(null,s));return t},a.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(n,"a",n),n},a.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},a.p="/phaser3",a(a.s=20)}([function(e,n,a){e.exports=a(3)(0)},function(e,n,a){e.exports=a(15)(834)},function(e,n,a){e.exports=a(3)(24)},function(e,n){e.exports=react},function(e,n){e.exports=lib},function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=r(a(18)),s=r(a(6));function r(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var i={lang:o({placeholder:"请选择日期",rangePlaceholder:["开始日期","结束日期"]},t.default),timePickerLocale:o({},s.default)};i.lang.ok="确 定";var l=i;n.default=l},function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t={placeholder:"请选择时间"};n.default=t},function(e,n,a){e.exports=a(3)(20)},function(e,n,a){e.exports=a(4)(20)},function(e,n,a){e.exports=a(4)(107)},function(e,n,a){"use strict";var t;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=((t=a(16))&&t.__esModule?t:{default:t}).default;n.default=s},function(e,n,a){},function(e,n,a){},function(e,n,a){},function(e,n,a){},function(e,n){e.exports=antd},function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=i(a(17)),s=i(a(5)),r=i(a(6)),o=i(a(19));function i(e){return e&&e.__esModule?e:{default:e}}var l={locale:"zh-cn",Pagination:t.default,DatePicker:s.default,TimePicker:r.default,Calendar:o.default,global:{placeholder:"请选择"},Table:{filterTitle:"筛选",filterConfirm:"确定",filterReset:"重置",selectAll:"全选当页",selectInvert:"反选当页",sortTitle:"排序",expand:"展开行",collapse:"关闭行"},Modal:{okText:"确定",cancelText:"取消",justOkText:"知道了"},Popconfirm:{cancelText:"取消",okText:"确定"},Transfer:{searchPlaceholder:"请输入搜索内容",itemUnit:"项",itemsUnit:"项"},Upload:{uploading:"文件上传中",removeFile:"删除文件",uploadError:"上传错误",previewFile:"预览文件",downloadFile:"下载文件"},Empty:{description:"暂无数据"},Icon:{icon:"图标"},Text:{edit:"编辑",copy:"复制",copied:"复制成功",expand:"展开"},PageHeader:{back:"返回"}};n.default=l},function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={items_per_page:"条/页",jump_to:"跳至",jump_to_confirm:"确定",page:"页",prev_page:"上一页",next_page:"下一页",prev_5:"向前 5 页",next_5:"向后 5 页",prev_3:"向前 3 页",next_3:"向后 3 页"},e.exports=n.default},function(e,n,a){"use strict";n.__esModule=!0,n.default={today:"今天",now:"此刻",backToToday:"返回今天",ok:"确定",timeSelect:"选择时间",dateSelect:"选择日期",weekSelect:"选择周",clear:"清除",month:"月",year:"年",previousMonth:"上个月 (翻页上键)",nextMonth:"下个月 (翻页下键)",monthSelect:"选择月份",yearSelect:"选择年份",decadeSelect:"选择年代",yearFormat:"YYYY年",dayFormat:"D日",dateFormat:"YYYY年M月D日",dateTimeFormat:"YYYY年M月D日 HH时mm分ss秒",previousYear:"上一年 (Control键加左方向键)",nextYear:"下一年 (Control键加右方向键)",previousDecade:"上一年代",nextDecade:"下一年代",previousCentury:"上一世纪",nextCentury:"下一世纪"},e.exports=n.default},function(e,n,a){"use strict";var t;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=((t=a(5))&&t.__esModule?t:{default:t}).default;n.default=s},function(e,n,a){"use strict";a.r(n);var t=a(0),s=a(7),r=(a(11),a(12),a(13),a(14),a(1));const o=(e=location.search)=>new URLSearchParams(e),i=(e,n)=>e.filter((a,t)=>n?e.findIndex(e=>e[n]===a[n])===t:e.indexOf(a)===t),l=e=>JSON.parse(JSON.stringify(e)),c=(e,n=[])=>new Proxy(()=>{},{get:(a,t)=>c(e,n.concat(t)),apply(a,t,s){let r=e;for(let e=0;e<n.length&&null!=r;e++)r=r[n[e]];return null==r&&(r=s[0]),r}}),h=(e={},n=[])=>{const a={};return e=l(e),n.forEach(n=>{a[n]=e[n]}),a},P=e=>{const n=[];n[0]=e[0];let a=[];for(let t=1;t<e.length;t++)n[0].level===e[t].level?(a.length>0&&(n[n.length-1].children=P(a),a=[]),n.push(e[t])):a.push(e[t]);return a.length>0&&(n[n.length-1].children=P(a),a=[]),n},{createContext:p,useReducer:d}=t,u=p("global"),m={status:1,anchors:[]},E=(e,n)=>{const a={SET_STATUS:{...e,status:n.data.status},SET_ANCHORS:{...e,anchors:n.data.anchors}};return c(a)[n.type](e)};var g=a(10),T=a.n(g),A=a(2);function y(){return(y=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var C=({routes:e})=>t.createElement(A.Switch,null,c(e)([]).map((e,n)=>e.redirect?t.createElement(A.Redirect,{key:n,from:e.from,to:e.to,exact:!0}):t.createElement(A.Route,{key:n,exact:e.exact,path:e.path,render:n=>t.createElement(e.component,y({},n,{routes:e.routes}))})));const{useEffect:I}=t;const{SubMenu:O}=r.Menu,{useEffect:v,useState:R,useMemo:S}=t;var f=Object(A.withRouter)(({location:e})=>{const[n,a]=R([]);v(()=>{a((({data:e=[],parents:n={value:0,field:"parentId"},columns:a=null,fields:t=null}={})=>{const s=l(e),r=(e,s)=>{let o=[];for(let l=0;l<e.length;l++)if(e[l][n.field]===s){if(e[l].children=r(e,e[l].id),0==e[l].children.length&&delete e[l].children,a)for(let n in a)Array.isArray(a[n])&&a[n].length>0?a[n].forEach(a=>{e[l][a]=e[l][n]}):e[l][a[n]]=e[l][n];o.push(t?h(e[l],i(t.concat("children"))):e[l])}return o};return r(s,n.value)})({data:$}))},[]);const s=e.pathname.match(/\/\w+/g),o=S(()=>(function e(n){return n.map(n=>n.children?t.createElement(O,{key:n.path,title:t.createElement("span",null,t.createElement("span",null,n.text))},e(n.children)):t.createElement(r.Menu.Item,{key:n.path},t.createElement(A.Link,{to:n.path},t.createElement("span",null,n.text))))})(n),[n]);return t.createElement(r.Menu,{theme:"light",mode:"inline",defaultSelectedKeys:[s.join("")],defaultOpenKeys:s,style:{height:"calc(100vh - 48px)",overflow:"auto"}},o)});const{Link:M}=r.Anchor,{useContext:G,useMemo:D}=t;var b=()=>{const{state:e}=G(u),{anchors:n}=e,a=D(()=>(function e(n){return n.map(n=>n.children?t.createElement(M,{key:n.title,href:n.href,title:n.title},e(n.children)):t.createElement(M,{key:n.title,href:n.href,title:n.title}))})(n),[n]);return t.createElement(r.Anchor,{affix:!1,style:{height:"calc(100vh - 48px)",overflow:"auto",paddingTop:30,paddingBottom:30},showInkInFixed:!0,getContainer:()=>window.document.querySelector(".phaser3-content")},a)};const{useState:_}=t,{Content:j,Header:x,Sider:L}=r.Layout;var N=a(8),K=a(9);const{useRef:B,useEffect:F}=t,{Paragraph:U}=r.Typography;var w=({language:e,value:n})=>{const a=B(null);return F(()=>{K.highlightBlock(a.current)},[]),t.createElement("pre",null,t.createElement(U,{copyable:{text:n}}),t.createElement("code",{ref:a,className:`language-${e}`},n))};const{useState:k,useEffect:Y,useContext:H}=t;let X=[];const V=((e,n=50,a)=>{let t=null;return(...s)=>{t&&clearTimeout(t),a&&!t&&e.apply(void 0,s),t=setTimeout(()=>{e.apply(void 0,s)},n)}})(e=>{e({type:"SET_ANCHORS",data:{anchors:P(X)}}),X=[]},100);var W=({level:e,children:n})=>{const{dispatch:a}=H(u);return Y(()=>{let t={level:e,href:`#${n[0].props.value}`,title:n[0].props.value};X.push(t),V(a)},[]),t.createElement(`h${e}`,{id:n[0].props.value},n)};const{useEffect:Z,useContext:J}=t;var q=({source:e})=>{const{dispatch:n}=J(u);return Z(()=>{n({type:"SET_ANCHORS",data:{anchors:[]}})},[]),t.createElement(N,{source:e,escapeHtml:!1,renderers:{heading:W,code:w}})};const{useEffect:z,useState:Q}=t;const $=[{id:10,parentId:0,text:"Home",path:"/home",icon:"home",component:({history:e})=>{const[n,a]=Q([]);return z(()=>{a($.filter(e=>0===e.parentId))},[]),t.createElement(t.Fragment,null,t.createElement(r.Row,{gutter:[{xs:8,sm:16,md:24,lg:32},20]},n.map(n=>t.createElement(r.Col,{xs:12,sm:8,xl:6,xxl:4,key:n.id},t.createElement(r.Button,{block:!0,icon:n.icon,onClick:()=>{!function(n){let a;const t=$.find(e=>e.parentId===n.id);a+=t?t.path:n.path,e.push(a)}(n)}},n.text)))),t.createElement(q,{source:"## 进行中\n\n- [ ] [Animation](/phaser3/animation)\n- [ ] [Camera](/phaser3/camera)\n- [ ] [Events](/phaser3/events)\n- [ ] [GameObjects](/phaser3/gameobjects)\n- [ ] [Geom](/phaser3/Geom/ellipse)\n- [ ] [Input](/phaser3/input)\n- [ ] [Loader](/phaser3/loader)\n- [ ] [Path](/phaser3/path)\n- [ ] [Physics](/phaser3/physics)\n- [ ] [Plugins](/phaser3/plugins)\n- [ ] [Pools](/phaser3/pools)\n- [ ] [Scalemanager](/phaser3/scalemanager)\n- [ ] [Scenes](/phaser3/scenes)\n- [ ] [Snapshot](/phaser3/snapshot)\n- [ ] [Spine](/phaser3/spine)\n- [ ] [Textures](/phaser3/textures)\n- [ ] [Time](/phaser3/time)\n- [ ] [Timestep](/phaser3/timestep)\n- [ ] [Transform](/phaser3/transform)\n- [ ] [Tweens](/phaser3/tweens)\n- [ ] [Utils](/phaser3/Utils)\n"}))}},{id:20,parentId:0,text:"Actions",path:"/actions",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 常用方法\n\n### Phaser.Actions.Call()\n\n> 遍历精灵组  \n> `Phaser.Actions.Call(items, callback, context)`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.Call(\n  groups.getChildren(),\n  function(group) {\n    group.setName('1')\n  },\n  this\n)\n```\n\n### Phaser.Actions.GridAlign()\n\n> 排列精灵组  \n> `Phaser.Actions.GridAlign(items, options)`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.GridAlign(groups.getChildren(), {\n  width: 2, // 列数\n  height: 2, // 行数\n  cellWidth: 100, // 列宽度\n  cellHeight: 100, // 行高度\n  position: Phaser.Display.Align.TOP_LEFT, // 元素相对单元格位置\n  x: 100, // 整个网格左上角横坐标\n  y: 100 // 整个网格左上角纵坐标\n})\n```\n\n### Phaser.Actons.IncX()\n\n> 横向移动  \n> `Phaser.Actons.IncX(items, value [,step] [,index] [,direction])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actons.IncX(\n  groups.getChildren(),\n  0.01, // 添加到 x 属性上的值\n  1, // xvalue = xvalue + step * i 后面递增\n  0, // 从 items 中下标为 0 开始搜索起\n  1 // direction: 1正向遍历  -1反向遍历\n)\n```\n\n### Phaser.Actions.IncY()\n\n> 纵向移动  \n> `Phaser.Actions.IncY(items, value [,step] [,index] [,diresction])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actons.IncY(\n  groups.getChildren(),\n  0.01, // 添加到 y 属性上的值\n  1, // yvalue = yvalue + step * i 后面递增\n  0, // 从 items 中下标为 0 开始搜索起\n  1 // direction: 1正向遍历  -1反向遍历\n)\n```\n\n### Phaser.Actions.IncXY()\n\n> 横纵向移动  \n> `Phaser.Actions.IncXY(items, x [,y] [,stepX] [,stepY] [,index] [,direction])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actons.IncXY(\n  groups.getChildren(),\n  0.01, // 添加到 x 属性上的值\n  0.01, // 添加到 y 属性上的值\n  1, // xvalue = xvalue + xstep * i 后面递增\n  1, // yvalue = yvalue + ystep * i 后面递增\n  0, // 从 items 中下标为 0 开始搜索起\n  1 // direction: 1正向遍历  -1返回遍历\n)\n```\n\n### Phaser.Actions.SetAlpha()\n\n> 设置透明度  \n> `Phaser.Actions.SetAlpha(items, value, [,step] [,index] [,direction])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actons.SetAlpha(\n  groups.getChildren(),\n  0.2, // 添加到 alpha 属性上的值\n  1, // value = value + step * i 后面递增\n  0, // 从 items 中下标为 0 开始搜索起\n  1 // direction: 1正向遍历  -1返回遍历\n)\n```\n\n### Phaser.Actions.Spread()\n\n> 基于属性设置一个区间传播渐变  \n> `Phaser.Actions.Spread(items, property, min, max, [,inc])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.Spread(\n  groups.getChildren(),\n  'alpha', // 属性\n  0, // 最小值\n  1, // 最大值\n  true // inc:  true为递增，false为递减\n)\n```\n\n### Phaser.Actions.SetXY()\n\n> 所有元素设置位置  \n> `Phaser.Actions.SetXY(items, x [,y] [,stepX] [,stepY] [,index] [,direction])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.SetXY(\n  groups.getChildren(),\n  10, // x 属性的值\n  10, // y 属性的值， 未定义则使用 x 属性的值\n  1, // xvalue = xvalue + xstep * i 后面递增\n  1, // yvalue = yvalue + ystep * i 后面递增\n  0, // 从 items 中下标为 0 开始搜索起\n  1 // direction: 1正向遍历  -1返回遍历\n)\n```\n\n### Phaser.Actions.ShiftPosition()\n\n> 改变位置， 尾影  \n> `Phaser.Actions.ShiftPosition(items, x, y [,direction] [output])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.ShiftPosition(\n  groups.getChildren(),\n  10, // 数组第一个项中的 x 属性值\n  10, // 数组第一个项中的 y 属性值\n  0, // direction： 0为第一个到最后一个  1反之\n  Phaser.Math.Vector2 // 最终存储对象位置的方式\n)\n```\n\n### Phaser.Actions.WrapInRectangle()\n\n> 包含在一个边界内  \n> `Phaser.Actions.WrapInRectangle(items, rect [,padding])`\n\n```js\nconst rect = new Phaser.Geom.Rectangle(100, 100, 256, 256) // 创建矩形\nconst groups = scene.add.group()\n// 超出矩形的的元素消失\nPhaser.Actions.WrapInRectangle(\n  groups.getChildren(),\n  rect,\n  30 // 如网页 padding 值一样，默认为：0\n)\n```\n\n## 轨迹上置放精灵\n\n### Phaser.Actions.PlaceOnCircle()\n\n> 圆的轨迹上置放精灵  \n> `Phaser.Actions.PlaceOnCircle(items, circle [,startAngle] [,endAngle])`\n\n```js\nconst groups = scene.add.group()\nconst circle = new Phaser.Geom.Circle(400, 300, 260)\nPhaser.Actions.PlaceOnCircle(\n  groups.getChildren(),\n  circle, // 圆形\n  0, // startAngle: 起始角度，以弧度为单位，默认：0\n  6.28 // endAngle: 停止角度，以弧度为单位，默认：6.28\n)\n```\n\n### Phaser.Actions.PlaceOnEllipse()\n\n> 椭圆的轨迹上置放精灵  \n> `Phaser.Actions.PlaceOnEllipse(items, ellipse [,startAngle] [,endAngle])`\n\n```js\nconst groups = scene.add.group()\nconst ellipse = new Phaser.Geom.Ellipse(400, 300, 260)\nPhaser.Actions.PlaceOnCircle(\n  groups.getChildren(),\n  ellipse, // 椭圆\n  0, // startAngle: 起始角度，以弧度为单位，默认：0\n  6.28 // endAngle: 停止角度，以弧度为单位，默认：6.28\n)\n```\n\n### Phaser.Actions.PlaceOnLine()\n\n> 线  \n> `Phaser.Actions.PlaceOnLine(items, line)`\n\n```js\nconst groups = scene.add.group()\nconst line = new Phaser.Geom.Line(400, 300, 100, 100)\nPhaser.Actions.PlaceOnCircle(\n  groups.getChildren(),\n  line // 线\n)\n```\n\n### Phaser.Actions.PlaceOnRectangle()\n\n> 矩形\n> `Phaser.Actions.PlaceOnRectangle(items, rect [,shift])`\n\n```js\nconst groups = scene.add.group()\nconst rect = new Phaser.Geom.Rectangle(400, 300, 100, 100)\nPhaser.Actions.PlaceOnRectangle(\n  groups.getChildren(),\n  rect, // 矩形\n  1 // 位置偏移量\n)\n```\n\n### Phaser.Actions.PlaceOnTriangle()\n\n> 三角形  \n> `Phaser.Actions.PlaceOnTriangle(items, triangle [,stepRate])`\n\n```js\nconst groups = scene.add.group()\nconst triangle = new Phaser.Geom.Triangle.BuildRight(200, 400, 100, 100)\nPhaser.Actions.PlaceOnTriangle(\n  groups.getChildren(),\n  triangle, // 三角形\n  1 // 步长率，精灵间距\n)\n```\n\n## 轨迹内填充精灵\n\n### Phaser.Actions.RandomCircle()\n\n> 圆  \n> `Phaser.Actions.RandomCircle(items, circle)`\n\n```js\nconst groups = scene.add.group()\nconst circle = new Phaser.Geom.Circle(200, 400, 100, 100)\nPhaser.Actions.RandomCircle(groups.getChildren(), circle)\n```\n\n### Phaser.Actions.RandomEllipse()\n\n> 椭圆  \n> `Phaser.Actions.RandomEllipse(items, ellipse)`\n\n```js\nconst groups = scene.add.group()\nconst ellipse = new Phaser.Geom.Ellipse(200, 400, 100, 100)\nPhaser.Actions.RandomEllipe(groups.getChildren(), ellipse)\n```\n\n### Phaser.Actions.RandomLine()\n\n> 线  \n> `Phaser.Actions.RandomLine(items, line)`\n\n```js\nconst groups = scene.add.group()\nconst line = new Phaser.Geom.Line(200, 400, 100, 100)\nPhaser.Actions.RandomLine(groups.getChildren(), line)\n```\n\n### Phaser.Actions.RandomRectangle()\n\n> 矩形  \n> `Phaser.Actions.RandomRectangle(items, rect)`\n\n```js\nconst groups = scene.add.group()\nconst rect = new Phaser.Geom.Rectangle(200, 400, 100, 100)\nPhaser.Actions.RandomRectangle(groups.getChildren(), rect)\n```\n\n### Phaser.Actions.RandomTriangle()\n\n> 三角形  \n> `Phaser.Actions.RandomTriangle(items, triangle)`\n\n```js\nconst groups = scene.add.group()\nconst triangle = new Phaser.Geom.Triangle.BuildEquilateral(200, 400, 100, 100)\nPhaser.Actions.RandomTriangle(groups.getChildren(), triangle)\n```\n\n## 旋转\n\n### Phaser.Actions.Rotate()\n\n> 每个精灵绕自身旋转  \n> `Phaser.Actions.Rotate(items, value [,step] [,index] [,direction])`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.Rotate(\n  groups.getChildren(),\n  0.01,\n  1, // value = value + step * i 后面递增\n  0, // 从 items 中下标为 0 开始搜索起\n  1 // direction: 1正向遍历  -1返回遍历\n)\n```\n\n### Phaser.Actions.RotateAround()\n\n> 绕圆心旋转，随机填充  \n> `Phaser.Actions.RotateAround(items, point, angle)`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.RotateAround(\n  groups.getChildren(),\n  { x: 100, y: 100 }, // 圆心的点\n  0 // 旋转的角度，以弧度为单位\n)\n```\n\n### Phaser.Actions.RotateAroundDistance()\n\n> 绕圆心距离旋转，轨迹上置放精灵  \n> `Phaser.Actions.RotateAroundDistance(items, point, angle, distance)`\n\n```js\nconst groups = scene.add.group()\nPhaser.Actions.RotateAroundDistance(\n  groups.getChildren(),\n  { x: 100, y: 100 }, // 圆心的点\n  0, // 旋转的角度，以弧度为单位\n  1 // 到旋转点的距离\n)\n```\n"}))},{id:30,parentId:0,text:"Animation",path:"/animation",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"未完善\n\n## 动画参数\n\n```js\n// atlas、spritesheet、png 都可以做成动画\nconst config = {\n  key: 'k', // 动画名称\n  frames: scene.anims.generateFrameNames('atlas'), // 帧\n  repeat: 6 // 循环次数\n}\n```\n\n## 创建动画\n\n```js\nscene.anims.create(config) // 创建动画\n```\n\n## 动画属性\n\n```js\nscene.anims.isPaused // 是否暂停动画\nscene.anims.currentAnim.frames // 数组下的 索引:index 进度:progress\n```\n\n## 动画方法\n\n```js\nscene.play('k') // 播放动画\nscene.anims.load('walk') // 精灵加载动画\nscene.anims.play('walk') // 播放动画\nscene.anims.pause() // 暂停动画\nscene.anims.resume() // 继续动画\nscene.anims.restart() // 重新动画\nscene.anims.setRepeat(7) // 循环7次\nconst k = scene.anims.get('k') // 获取动画\nk.addFrame(scene.anims.generateFrameNames()) // 原动画再加动画\n```\n\n## 监听动画的添加\n\n```js\nscene.anims.on(Phaser.Animations.Events.ADD_ANIMATION, function() {}, scene) // 监听动画添加\n```\n"}))},{id:40,parentId:0,text:"Audio",path:"/audio",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 音频配置\n\n```js\nconst config = {\n  audio: {\n    disableWebAudio: true, // 默认是WebAudio，禁用则为HTML Audio\n    noAudio: true // 不使用 Audio\n  }\n}\n```\n\n## 加载音频\n\n```js\nscene.load.audio('audio', ['audio.ogg', 'audio.mp3'], { instances: 2 })\nscene.load.audioSprite('audio', 'audio.json', ['audio.ogg', 'audio.mp3'])\n```\n\n## 添加音频\n\n```js\nconst audio = scene.sound.add('audio', { loop: true }) // 获取音频\nconst audios = scene.cache.json.get('audio').spritemap // 获取所有音频\nconst audio = scene.sound.playAudioSprite('audio', 'name') // 获取片段音频\n```\n\n## 音频属性设置（精灵）\n\n```js\naudio.rate = 1.5 // 加快速率\naudio.detune = 600 // 音色偏移\naudio.rate = 1 // 减慢速率\naudio.detune = 0 // 音色偏移\naudio.mute = true // 静音\naudio.volume = 0.5 // 音量\naudio.seek = 0 // 跳跃到新位置\n```\n\n## 音频属性设置（场景）\n\n```js\nscene.sound.rate = 1.5 // 加快速率\nscene.sound.detune = 600 // 音色偏移\nscene.sound.rate = 1 // 减慢速率\nscene.sound.detune = 0 // 音色偏移\nscene.sound.mute = true // 静音\nscene.sound.volume = 0.5 // 音量\nscene.sound.seek = 0 // 跳跃到新位置\n```\n\n## 音频方法调用（精灵）\n\n```js\naudio.play() // 播放\naudio.pause() // 暂停\naudio.resume() // 继续\naudio.stop() // 停止\n```\n\n## 音频方法调用（场景）\n\n```js\nscene.sound.pauseAll() // 全部暂停\nscene.sound.resumeAll() // 全部恢复\nscene.sound.stopAll() // 全部停止\n```\n\n## 音频监听（精灵）\n\n```js\naudio.addMarker({\n  name: 'loop',\n  start: 0,\n  duration: 7.68,\n  config: { loop: true }\n}) // 添加标识\naudio.play('loop', { delay: 0 }) // 循环延迟时间，播放\naudio.once('looped', function(sound) {}) // 监听循环结束时\naudio.once('complete', function(sound) {}) // 原 ended 改为 complete 音频播放结束回调\n```\n\n## 音频监听（场景）\n\n```js\nscene.sound.once('mute', function(soundManager, value) {}) // 监听静音\nscene.sound.once('volume', function(soundManager, value) {}) // 监听音量\nscene.sound.once('pauseall', function(soundManager, value) {}) // 监听全部暂停\nscene.sound.once('resumeall', function(soundManager, value) {}) // 监听全部恢复\nscene.sound.once('stopall', function(soundManager, value) {}) // 监听全部停止\nscene.sound.once('unlocked', function(soundManager) {}) // 监听解锁\n```\n"}))},{id:50,parentId:0,text:"Cache",path:"/cache",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## json 文件\n\n```js\nscene.load.json('data', 'data.json') // 加载\nscene.cache.json.get('data') // 读取\n```\n\n## txt 文件\n\n```js\nscene.load.text('data', 'data.txt') // 加载\nscene.cache.text.get('data') // 读取\n```\n\n## xml 文件\n\n```js\nscene.load.xml('data', 'data.xml') // 加载\nscene.cache.xml.get('data') // 读取\n```\n"}))},{id:60,parentId:0,text:"Camera",path:"/camera",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法二\n\n123123\n\n"}))},{id:70,parentId:0,text:"Components",exact:!0,path:"/components"},{id:71,parentId:70,text:"Data",path:"/components/data",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 设置数据（精灵）\n\n```js\nsprite.setDataEnabled() // 开启数据功能\nsprite.data.set('data', 10) // 设置数据\nsprite.data.get('data') // 读取数据\nsprite.data.values.data = 20 // 更改数据\nsprite.data.query(/^10/) // 查询数据\n```\n\n## 设置数据（场景）\n\n```js\nscene.setDataEnabled() // 开启数据功能\nscene.data.set('data', 10) // 设置数据\nscene.data.get('data') // 读取数据\nscene.data.values.data = 20 // 更改数据\nscene.data.query(/^10/) // 查询数据\n```\n\n## 设置多个字段\n\n```js\nsprite.setData({ name: 'gem', level: 2 }) // 设置多个数据\nsprite.setData('name', 'gem') // 设置单个数据\nsprite.getData('name') // 获取数据\n```\n\n## 新数据添加监听\n\n```js\nsprite.on('changedata-data', (gameObject, value) => {}) // 监听 data 字段变化\nsprite.on('changedata', (gameObject, key, value) => {}) // 监听数据变化\nsprite.on('setdata', (gameObject, key, value) => {}) // 监听新字段设置\n```\n"}))},{id:80,parentId:0,text:"DepthSorting",path:"/depthsorting",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 设置层级\n\n```js\nsprite.depth = 1\nsprite.setDepth(1)\n```\n\n## 一些函数\n\n```js\nscene.children.bringToTop(scene.children.getAt(0)) // 将最底元素置顶\nscene.children.remove(scene.children.getRandom()) // 随机移除\n```\n"}))},{id:90,parentId:0,text:"Display",path:"/display",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 简介\n\n> 相对定位、透明度设置、混合模式、颜色处理、遮罩层、色彩设置\n\n## Align\n\n> 精灵相对定位\n\n1. 正中间\n\n   ```js\n   Phaser.Display.Align.In.Center(child, parent)\n   ```\n\n1. 上中间\n\n   ```js\n   Phaser.Display.Align.In.TopCenter(child, parent)\n   ```\n\n1. 下中间\n\n   ```js\n   Phaser.Display.Align.In.BottomCenter(child, parent)\n   ```\n\n1. 左中间\n\n   ```js\n   Phaser.Display.Align.In.LeftCenter(child, parent)\n   ```\n\n1. 右中间\n\n   ```js\n   Phaser.Display.Align.In.RightCenter(child, parent)\n   ```\n\n1. 左上角\n\n   ```js\n   Phaser.Display.Align.In.TopLeft(child, parent)\n   ```\n\n1. 右上角\n\n   ```js\n   Phaser.Display.Align.In.TopRight(child, parent)\n   ```\n\n1. 左下角\n\n   ```js\n   Phaser.Display.Align.In.BottomLeft(child, parent)\n   ```\n\n1. 右下角\n\n   ```js\n   Phaser.Display.Align.In.BottomRight(child, parent)\n   ```\n\n## Alpha\n\n> 设置精灵透明度\n\n1. 整体设置\n\n   ```js\n   image.setAlpha(0.2)\n   ```\n\n1. 不同位置（方法）\n\n   ```js\n   // top left, top right, bottom left, bottom right\n   image.setAlpha(0, 0, 1, 1)\n   ```\n\n1. 不同位置（属性）\n\n   ```js\n   image.alphaTopLeft = 0\n   image.alphaTopRight = 0\n   image.alphaBottomLeft = 0\n   image.alphaBottomRight = 0\n   ```\n\n1. 清除透明度\n\n   ```js\n   image.clearAlpha()\n   ```\n\n1. 透明度动画\n\n   ```js\n   scene.tweens.add({\n     targets: image, // 精灵\n     alphaTopLeft: {\n       value: 1, // 透明度\n       duration: 5000, // 持续 5000ms\n       ease: 'Power1', // 动画曲线\n       delay: 1000 // 延迟 1000ms\n     }\n   })\n   ```\n\n## Blend Modes\n\n1. 基本\n\n   ```js\n   const renderer = scene.sys.game.renderer\n   const modeIndex = renderer.addBlendMode([gl.ZERO, gl.SRC_COLOR], gl.FUNC_ADD)\n   image.setBlendMode(modeIndex)\n   ```\n\n## Color\n\n1. 内置方法\n\n   ```js\n   const color = new Phaser.Display.Color(150, 0, 0)\n   color.brighten(10) // 亮度\n   color.darken(10) // 变暗\n   color.lighten(10) // 减轻颜色\n   ```\n\n1. 颜色转换\n\n   ```js\n   // Hex 格式转 Color 对象\n   Phaser.Display.Color.HexStringToColor('#ff0000')\n\n   // RGB 格式转 Color 对象\n   Phaser.Display.Color.RGBStringToColor('rgba(255, 0, 0, 1)')\n\n   // Value\n   Phaser.Display.Color.ValueToColor(0xff0000)\n   Phaser.Display.Color.ValueToColor('#ff0000')\n   Phaser.Display.Color.ValueToColor('#f00')\n   Phaser.Display.Color.ValueToColor('rgba(255, 0, 0, 1)')\n   ```\n\n1. 随机颜色\n\n   ```js\n   color.random(50)\n   color.randomGray(50) // 随机灰色\n   ```\n\n1. HSV 颜色\n\n   ```js\n   Phaser.Display.Color.HSVColorWheel()\n   ```\n\n## Masks\n\n1. 创建 mask 方式： `createBitmapMask()`\n\n   ```js\n   const mask = image.createBitmapMask()\n   ```\n\n1. 创建 mask 方式： `createGeometryMask()`\n\n   ```js\n   const shape = scene.make.graphics()\n   const mask = shape.createGeometryMask()\n   ```\n\n1. 创建 mask 方式：`Phaser.Display.Masks.BitmapMask()`\n\n   ```js\n   const sprite = scene.make.sprite({\n     x: 100,\n     y: 100,\n     key: 'sp',\n     add: false\n   })\n   new Phaser.Display.Masks.BitmapMask(this, sprite)\n   ```\n\n1. 使用 mask\n\n   ```js\n   graphics.mask = mask\n   graphics.setMask(mask)\n   sprite.setMask(mask)\n   particles.setMask(mask)\n   ```\n\n## Tint\n\n1. 整体设置\n\n   ```js\n   image.setTint(0xff0000)\n   ```\n\n1. 不同位置\n\n   ```js\n   // top left, top right, bottom left, bottom right\n   image.setTint(0xff0000, 0xffff00, 0x00ffff0, 0xff00ff)\n   ```\n\n1. 完全填充\n\n   ```js\n   image.setTintFill(0xff0000) // 给精灵填充颜色，精灵只剩下一个形状\n   ```\n\n1. 清除\n\n   ```js\n   image.clearTint()\n   ```\n"}))},{id:100,parentId:0,text:"Events",path:"/events",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:110,parentId:0,text:"GameConfig",path:"/gameconfig",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 配置\n\n```js\nconst config = {\n  type: Phaser.AUTO, // 渲染方式 Phaser.CANVAS Phaser.WEBGL Phaser.HEADLESS\n  parent: 'app', // 父容器\n  canvas: myCanvas, // 自定义\n  context: myContext, // 自定义\n  seed: [(Date.now() * Math.random()).toString()], // 随机种子\n  title: 'test', // 控制台中内容\n  url: 'https://www.hemmao.com', // 控制台中的内容\n  version: '1.0.1',\n  banner: false, // 隐藏\n  pixelArt: true, // 像素模式， 像素更清晰\n  roundPixels: true, // 取整\n  transparent: true, // 透明\n  banner: {\n    // 控制台中内容\n    text: '#ffffff',\n    background: ['#fff200', '#38f0e8'],\n    hidePhaser: true\n  }\n}\n```\n\n## 获取配置信息\n\n```js\ngame.config.gameTitle // 获取控制台标题\ngame.config.gameURL // 获取控制台URL\n```\n\n## 创建游戏\n\n```js\nnew Phaser.Game(config) // 创建游戏\nnew Phaser.Game(config2) // 创建多个游戏实例\n```\n\n## 销毁游戏\n\n```js\nscene.sys.game.destroy(true) // 销毁游戏\n```\n"}))},{id:120,parentId:0,text:"GameObjects",path:"/gameobjects",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:130,parentId:0,text:"Geom",exact:!0,path:"/geom"},{id:131,parentId:130,text:"Circle",path:"/geom/circle",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 图形设置\n\n```js\nconst graphics = scene.add.graphics({\n  lineStyle: {\n    // 线的样式\n    width: 2,\n    color: 0x00ff00\n  },\n  fillStyle: {\n    // 填充的样式\n    color: 0xff00ff\n  }\n})\n```\n\n## 画圆\n\n```js\nconst circle = new Phaser.Geom.Circle(200, 200, 100)\ngraphics.fillCircleShape(circle) // 填充一个圆\ngraphics.strokeCircleShape(circle) // 描边\n```\n\n## 圆的属性\n\n```js\ncircle.diameter = circle.radius // 直径等于原半径\ncircle.radius = 10 // 半径\ncircle.x = 10 // 横坐标\ncircle.y = 10 // 纵坐标\ncircle.left = 10\ncircle.top = 10\ncircle.bottom = 10\ncircle.right = 10\n```\n\n## 圆的方法\n\n> 圆的静态方法，查看 [Phaser.Geom.Circle](/phaser3/const/staticmethod)\n\n```js\ncircle.setTo(100, 100, 50) // 设置到指定位置与大小\ncircle.contains(pointer.x, pointer.y) // 点是否在一个圆中\ncircle.setPosition(100, 200) // 设置圆心位置\ncircle.getPoint(0.1, point) // 参数1:弧度，参数2: 基于 circle 改变 point 的值\ncircle.getPoints(32) // 获取圆周上的一些点的坐标\ncircle.getRandomPoint() // 获取圆内一些点的坐标\ncircle.isEmpty() // 圆为空时， radius 为 0 或小于 0\ncircle.setEmpty()\n```\n\n## 圆的一些信息\n\n```js\nconst area = Phaser.Geom.Circle.Area(circle) // 获取圆的面积\nconst circumference = Phaser.Geom.Circle.Circumference(circle) // 获取圆的周长\n```\n"}))},{id:132,parentId:130,text:"Ellipse",path:"/geom/ellipse",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:133,parentId:130,text:"Intersects",path:"/geom/intersects",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:134,parentId:130,text:"Line",path:"/geom/line",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:135,parentId:130,text:"Point",path:"/geom/point",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:136,parentId:130,text:"Polygon",path:"/geom/polygon",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:137,parentId:130,text:"Rectangle",path:"/geom/rectangle",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:138,parentId:130,text:"Triangle",path:"/geom/triangle",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:140,parentId:0,text:"Input",path:"/input",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:150,parentId:0,text:"Loader",exact:!0,path:"/loader"},{id:151,parentId:150,text:"Webfont",path:"/loader/webfont",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 安装使用 webfont.js\n\n> https://github.com/typekit/webfontloader\n\n1. 安装\n\n   ```bash\n   yarn add webfontloader\n   ```\n\n1. 使用\n\n   ```js\n   import * as Webfont from 'webfontloader\n   ```\n\n## 编写 fonts.css\n\n```css\n@font-face {\n  font-family: 'customname';\n  src: url('customname.woff2') format('woff2'), url('customname.woff') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n```\n\n## 引入自定义字体\n\n```js\nWebfont.load({\n  custom: {\n    families: ['customname'],\n    urls: ['fonts.css']\n  }\n})\n```\n\n## 使用自定义字体\n\n```js\nscene.add.text(0, 0, 'custom font', {\n  fontFamily: 'customname'\n})\n```\n"}))},{id:160,parentId:0,text:"Path",path:"/path",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:170,parentId:0,text:"Physics",path:"/physics",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:180,parentId:0,text:"Plugins",path:"/plugins",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:190,parentId:0,text:"Pools",path:"/pools",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:200,parentId:0,text:"Scalemanager",path:"/scalemanager",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:210,parentId:0,text:"Scenes",path:"/scenes",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:220,parentId:0,text:"Snapshot",path:"/snapshot",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:230,parentId:0,text:"Spine",path:"/spine",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:240,parentId:0,text:"Textures",path:"/textures",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:250,parentId:0,text:"Time",path:"/time",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:260,parentId:0,text:"Timestep",path:"/timestep",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:270,parentId:0,text:"Transform",path:"/transform",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:280,parentId:0,text:"Tweens",path:"/tweens",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:290,parentId:0,text:"Utils",path:"/utils",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## 方法一\n\n123123\n"}))},{id:300,parentId:0,text:"Const",exact:!0,path:"/const"},{id:301,parentId:300,text:"Property",path:"/const/property",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## Phaser\n\n```js\nPhaser.AUTO // 0 设置渲染类型\nPhaser.CANVAS // 1 canvas 渲染\nPhaser.WEBGL // 2 webgl 渲染\nPhaser.HEADLESS // 3 无头渲染\nPhaser.CSSBlendModes // 混合模式为 css 混合模式\nPhaser.NONE // 4 方向常量\nPhaser.UP // 5 方向常量\nPhaser.DOWN // 6 方向常量\nPhaser.LEFT // 7 方向常量\nPhaser.RIGHT // 8 方向常量\nPhaser.FOREVER // -1 永远不断\nPhaser.VERSION // 版本号\n```\n\n## Phaser.Actions\n\n> 暂无\n\n## Phaser.Animations\n\n```js\nPhaser.Animations.Events.ADD_ANIMATION // add 添加动画回调\nPhaser.Animations.Events.ANIMATION_COMPLETE // complete 动画结束回调\nPhaser.Animations.Events.ANIMATION_REPEAT // repeat 循环动画回调\nPhaser.Animations.Events.ANIMATION_RESTART // restart 重新开始动画回调\nPhaser.Animations.Events.ANIMATION_START // start 动画开始时回调\nPhaser.Animations.Events.PAUSE_ALL // pauseall 暂停所有动画时回调\nPhaser.Animations.Events.RESUME_ALL // resumeall 恢复所有动画时回调\nPhaser.Animations.Events.REMOVE_ANIMATION // remove 动画移除时回调\n\nPhaser.Animations.Events.SPRITE_ANIMATION_COMPLETE // animationcomplete 精灵播放完动画回调\nPhaser.Animations.Events.SPRITE_ANIMATION_REPEAT // animationrepeat 精灵重复播放回调\nPhaser.Animations.Events.SPRITE_ANIMATION_RESTART // animationrestart 精灵重新播放回调\nPhaser.Animations.Events.SPRITE_ANIMATION_START // animationstart 精灵播放回调\nPhaser.Animations.Events.SPRITE_ANIMATION_UPDATE // animationupdate 精灵更新回调\n\nPhaser.Animations.Events.SPRITE_ANIMATION_KEY_COMPLETE // animationcomplete- 特定精灵播放完动画回调\nPhaser.Animations.Events.SPRITE_ANIMATION_KEY_REPEAT // animationrepeat- 特定精灵重复播放回调\nPhaser.Animations.Events.SPRITE_ANIMATION_KEY_RESTART // animationrestart- 特定精灵重新播放回调\nPhaser.Animations.Events.SPRITE_ANIMATION_KEY_START // animationstart- 特定精灵播放回调\nPhaser.Animations.Events.SPRITE_ANIMATION_KEY_UPDATE // animationupdate- 特定精灵更新回调\n```\n\n## Phaser.BlendModes\n\n```js\nPhaser.BlendModes.SKIP_CHECK // -1 跳过混合模式\nPhaser.BlendModes.NORMAL // 0 正常混合模式 canvas webgl\nPhaser.BlendModes.ADD // 1 添加混合模式 canvas webgl\nPhaser.BlendModes.MULTIPLY // 2 复制混合模式 canvas webgl\nPhaser.BlendModes.SCREEN // 3 屏幕混合模式 canvas webgl\nPhaser.BlendModes.OVERLAY // 4 叠加混合模式 canvas\nPhaser.BlendModes.DARKEN // 5 高暗混合模式 canvas\nPhaser.BlendModes.LIGHTEN // 6 调亮混合模式 canvas\nPhaser.BlendModes.COLOR_DODGE // 7 颜色减淡混合模式 canvas\nPhaser.BlendModes.COLOR_BURN // 8 颜色加深混合模式 canvas\nPhaser.BlendModes.HARD_LIGHT // 9 硬光混合模式 canvas\nPhaser.BlendModes.SOFT_LIGHT // 10 柔光混合模式 canvas\nPhaser.BlendModes.DIFFERENCE // 11 不同的混合模式 canvas\nPhaser.BlendModes.EXCLUSION // 12 排除混合模式 canvas\nPhaser.BlendModes.HUE // 13 色调混合模式 canvas\nPhaser.BlendModes.SATURATION // 14 饱和混合模式 canvas\nPhaser.BlendModes.COLOR // 15 颜色混合模式 canvas\nPhaser.BlendModes.LUMINOSITY // 16 亮度混合模式 canvas\nPhaser.BlendModes.ERASE // 17 Alpha 擦除混合模式 canvas webgl\nPhaser.BlendModes.SOURCE_IN // 18 源混合模式 canvas\nPhaser.BlendModes.SOURCE_OUT // 19 源输出混合模式 canvas\nPhaser.BlendModes.SOURCE_ATOP // 20 源输出混合模式 canvas\nPhaser.BlendModes.DESTINATION_OVER // 21 目标-结束混合模式 canvas\nPhaser.BlendModes.DESTINATION_IN // 22 目的地-在混合模式 canvas\nPhaser.BlendModes.DESTINATION_OUT // 23 目标输出混合模式 canvas\nPhaser.BlendModes.DESTINATION_ATOP // 24 目标输出混合模式 canvas\nPhaser.BlendModes.LIGHTER // 25 调亮混合模式 canvas\nPhaser.BlendModes.COPY // 26 复制混合模式 canvas\nPhaser.BlendModes.XOR // 27 Xor 混合模式 canvas\n```\n\n## Phaser.Cache\n\n```js\nPhaser.Cache.Events.ADD // add\nPhaser.Cache.Events.REMOVE // remove\n```\n\n## Phaser.Cameras\n\n```js\nPhaser.Cameras.Scene2D.Events.DESTROY // cameradestroy 销毁时\nPhaser.Cameras.Scene2D.Events.FADE_IN_COMPLETE // camerafadeincomplete fadein\nPhaser.Cameras.Scene2D.Events.FADE_IN_START // camerafadeinstart   fadeinstart\nPhaser.Cameras.Scene2D.Events.FADE_OUT_COMPLETE // camerafadeoutcomplete fadeout\nPhaser.Cameras.Scene2D.Events.FADE_OUT_START // camerafadeoutstart fadeoutstart\nPhaser.Cameras.Scene2D.Events.FLASH_COMPLETE // cameraflashcomplete flash\nPhaser.Cameras.Scene2D.Events.FLASH_START // cameraflashstart flashstart\nPhaser.Cameras.Scene2D.Events.PAN_COMPLETE // camerapancomplete\nPhaser.Cameras.Scene2D.Events.PAN_START // camerapanstart\nPhaser.Cameras.Scene2D.Events.POST_RENDER // postrender\nPhaser.Cameras.Scene2D.Events.PRE_RENDER // prerender\nPhaser.Cameras.Scene2D.Events.SHAKE_COMPLETE // camerashakecomplete\nPhaser.Cameras.Scene2D.Events.SHAKE_START // camerashakestart\nPhaser.Cameras.Scene2D.Events.ZOOM_COMPLETE // camerazoomcomplete\nPhaser.Cameras.Scene2D.Events.ZOOM_START // camerazoomstart\n```\n\n## Phaser.Core\n\n```js\nPhaser.Core.Events.BLUR // blur\nPhaser.Core.Events.BOOT // boot\nPhaser.Core.Events.CONTEXT_LOST // contextlost\nPhaser.Core.Events.CONTEXT_RESTORED // contextrestored\nPhaser.Core.Events.DESTROY // destroy\nPhaser.Core.Events.FOCUS // focus\nPhaser.Core.Events.HIDDEN // hidden\nPhaser.Core.Events.PAUSE // pause\nPhaser.Core.Events.POST_RENDER // postrender\nPhaser.Core.Events.POST_STEP // poststep\nPhaser.Core.Events.PRE_RENDER // prerender\nPhaser.Core.Events.PRE_STEP // prestep\nPhaser.Core.Events.READY // ready\nPhaser.Core.Events.RESUME // resume\nPhaser.Core.Events.STEP // step\nPhaser.Core.Events.VISIBLE // visible\n```\n\n## Phaser.Create\n\n> 暂无\n\n## Phaser.Curves\n\n> 暂无\n\n## Phaser.Data\n\n```js\nPhaser.Data.Events.CHANGE_DATA // changedata\nPhaser.Data.Events.CHANGE_DATA_KEY // changedata-\nPhaser.Data.Events.REMOVE_DATA // removedata\nPhaser.Data.Events.SET_DATA // setdata\n```\n\n## Phaser.Device\n\n```js\nPhaser.Device.Audio\nPhaser.Device.Browser\nPhaser.Device.CanvasFeatures\nPhaser.Device.Features\nPhaser.Device.Fullscreen\nPhaser.Device.Input\nPhaser.Device.OS\nPhaser.Device.Video\n```\n\n## Phaser.Display\n\n> 暂无\n\n### Align\n\n```js\nPhaser.Display.Align.TOP_LEFT // 0\nPhaser.Display.Align.TOP_CENTER // 1\nPhaser.Display.Align.TOP_RIGHT // 2\nPhaser.Display.Align.LEFT_TOP // 3\nPhaser.Display.Align.LEFT_CENTER // 4\nPhaser.Display.Align.LEFT_BOTTOM // 5\nPhaser.Display.Align.CENTER // 6\nPhaser.Display.Align.RIGHT_TOP // 7\nPhaser.Display.Align.RIGHT_CENTER // 8\nPhaser.Display.Align.RIGHT_BOTTOM // 9\nPhaser.Display.Align.BOTTOM_LEFT // 10\nPhaser.Display.Align.BOTTOM_CENTER // 11\nPhaser.Display.Align.BOTTOM_RIGHT // 12\n```\n\n## Phaser.DOM\n\n> 暂无\n\n## Phaser.Events\n\n> 暂无\n\n## Phaser.GameObjects\n\n### BitmapText\n\n```js\nPhaser.GameObjects.BitmapText.ALIGN_LEFT // 0\nPhaser.GameObjects.BitmapText.ALIGN_CENTER // 1\nPhaser.GameObjects.BitmapText.ALIGN_RIGHT // 2\nPhaser.GameObjects.BitmapText.ParseFromAtlas // function\nPhaser.GameObjects.BitmapText.ParseXMLBitmapFont // function\n```\n\n### Events\n\n```js\nPhaser.GameObjects.Events.DESTROY // destroy\nPhaser.GameObjects.Events.VIDEO_COMPLETE // complete\nPhaser.GameObjects.Events.VIDEO_CREATED // created\nPhaser.GameObjects.Events.VIDEO_ERROR // error\nPhaser.GameObjects.Events.VIDEO_LOOP // loop\nPhaser.GameObjects.Events.VIDEO_PLAY // play\nPhaser.GameObjects.Events.VIDEO_SEEKED // seeked\nPhaser.GameObjects.Events.VIDEO_SEEKING // seeking\nPhaser.GameObjects.Events.VIDEO_STOP // stop\nPhaser.GameObjects.Events.VIDEO_TIMEOUT // timeout\nPhaser.GameObjects.Events.VIDEO_UNLOCKED // unlocked\n```\n\n### RetroFont\n\n```js\nPhaser.GameObjects.RetroFont.TEXT_SET1\nPhaser.GameObjects.RetroFont.TEXT_SET2\nPhaser.GameObjects.RetroFont.TEXT_SET3\nPhaser.GameObjects.RetroFont.TEXT_SET4\nPhaser.GameObjects.RetroFont.TEXT_SET5\nPhaser.GameObjects.RetroFont.TEXT_SET6\nPhaser.GameObjects.RetroFont.TEXT_SET7\nPhaser.GameObjects.RetroFont.TEXT_SET8\nPhaser.GameObjects.RetroFont.TEXT_SET9\nPhaser.GameObjects.RetroFont.TEXT_SET10\nPhaser.GameObjects.RetroFont.TEXT_SET11\n```\n\n## Phaser.Geom\n\n```js\nPhaser.Geom.CIRCLE // 0\nPhaser.Geom.ELLIPSE // 1\nPhaser.Geom.LINE // 2\nPhaser.Geom.POINT // 3\nPhaser.Geom.POLYGON // 4\nPhaser.Geom.RECTANGLE // 5\nPhaser.Geom.TRIANGLE // 6\n```\n\n## Phaser.Input\n\n```js\nPhaser.Input.MOUSE_DOWN // 0\nPhaser.Input.MOUSE_MOVE // 1\nPhaser.Input.MOUSE_UP // 2\nPhaser.Input.TOUCH_START // 3\nPhaser.Input.TOUCH_MOVE // 4\nPhaser.Input.TOUCH_END // 5\nPhaser.Input.POINTER_LOCK_CHANGE // 6\nPhaser.Input.TOUCH_CANCEL // 7\nPhaser.Input.MOUSE_WHEEL // 8\n```\n\n### Events\n\n```js\nPhaser.Input.Events.BOOT // 'boot'\nPhaser.Input.Events.DESTROY // 'destroy'\nPhaser.Input.Events.DRAG_END // 'dragend'\nPhaser.Input.Events.DRAG_ENTER // 'dragenter'\nPhaser.Input.Events.DRAG // 'drag'\nPhaser.Input.Events.DRAG_LEAVE // 'dragleave'\nPhaser.Input.Events.DRAG_OVER // 'dragover'\nPhaser.Input.Events.DRAG_START // 'dragstart'\nPhaser.Input.Events.DROP // 'drop'\nPhaser.Input.Events.GAME_OUT // 'gameout'\nPhaser.Input.Events.GAME_OVER // 'gameover'\n\nPhaser.Input.Events.GAMEOBJECT_DOWN // 'gameobjectdown'\nPhaser.Input.Events.GAMEOBJECT_DRAG_END // 'dragend'\nPhaser.Input.Events.GAMEOBJECT_DRAG_ENTER // 'dragenter'\nPhaser.Input.Events.GAMEOBJECT_DRAG // 'drag'\nPhaser.Input.Events.GAMEOBJECT_DRAG_LEAVE // 'dragleave'\nPhaser.Input.Events.GAMEOBJECT_DRAG_OVER // 'dragover'\nPhaser.Input.Events.GAMEOBJECT_DRAG_START // 'dragstart'\nPhaser.Input.Events.GAMEOBJECT_DROP // 'drop'\nPhaser.Input.Events.GAMEOBJECT_MOVE // 'gameobjectmove'\nPhaser.Input.Events.GAMEOBJECT_OUT // 'gameobjectout'\nPhaser.Input.Events.GAMEOBJECT_OVER // 'gameobjectover'\nPhaser.Input.Events.GAMEOBJECT_POINTER_DOWN // 'pointerdown'\nPhaser.Input.Events.GAMEOBJECT_POINTER_MOVE // 'pointermove'\nPhaser.Input.Events.GAMEOBJECT_POINTER_OUT // 'pointerout'\nPhaser.Input.Events.GAMEOBJECT_POINTER_OVER // 'pointerover'\nPhaser.Input.Events.GAMEOBJECT_POINTER_UP // 'pointerup'\nPhaser.Input.Events.GAMEOBJECT_POINTER_WHEEL // 'wheel'\nPhaser.Input.Events.GAMEOBJECT_UP // 'gameobjectup'\nPhaser.Input.Events.GAMEOBJECT_WHEEL // 'gameobjectwheel'\n\nPhaser.Input.Events.MANAGER_BOOT // 'boot'\nPhaser.Input.Events.MANAGER_PROCESS // 'process'\nPhaser.Input.Events.MANAGER_UPDATE // 'update'\nPhaser.Input.Events.POINTER_DOWN // 'pointerdown'\nPhaser.Input.Events.POINTER_DOWN_OUTSIDE // 'pointerdownoutside'\nPhaser.Input.Events.POINTER_MOVE // 'pointermove'\nPhaser.Input.Events.POINTER_OUT // 'pointerout'\nPhaser.Input.Events.POINTER_OVER // 'pointerover'\nPhaser.Input.Events.POINTER_UP // 'pointerup'\nPhaser.Input.Events.POINTER_UP_OUTSIDE // 'pointerupoutside'\nPhaser.Input.Events.POINTER_WHEEL // 'wheel'\nPhaser.Input.Events.POINTERLOCK_CHANGE // 'pointerlockchange'\nPhaser.Input.Events.PRE_UPDATE // 'preupdate'\nPhaser.Input.Events.SHUTDOWN // 'shutdown'\nPhaser.Input.Events.START // 'start'\nPhaser.Input.Events.UPDATE // 'update'\n```\n\n### Gamepad\n\n```js\nPhaser.Input.Gamepad.Configs.DUALSHOCK_4\nPhaser.Input.Gamepad.Configs.SNES_USB\nPhaser.Input.Gamepad.Configs.XBOX_360\nPhaser.Input.Gamepad.Events.BUTTON_DOWN // down\nPhaser.Input.Gamepad.Events.BUTTON_UP // up\nPhaser.Input.Gamepad.Events.CONNECTED // connected\nPhaser.Input.Gamepad.Events.DISCONNECTED // disconnected\nPhaser.Input.Gamepad.Events.GAMEPAD_BUTTON_DOWN // down\nPhaser.Input.Gamepad.Events.GAMEPAD_BUTTON_UP // up\n```\n\n### Keyboard\n\n```js\nPhaser.Input.Keyboard.ANY_KEY_DOWN // keydown\nPhaser.Input.Keyboard.ANY_KEY_UP // keyup\nPhaser.Input.Keyboard.COMBO_MATCH // keycombomatch\nPhaser.Input.Keyboard.DOWN // down\nPhaser.Input.Keyboard.KEY_DOWN // keydown-\nPhaser.Input.Keyboard.KEY_UP // keyup-\nPhaser.Input.Keyboard.UP // up\n```\n\n#### KeyCodes\n\n```js\nPhaser.Input.Keyboard.KeyCodes.BACKSPACE // 8\nPhaser.Input.Keyboard.KeyCodes.TAB // 9\nPhaser.Input.Keyboard.KeyCodes.ENTER // 13\nPhaser.Input.Keyboard.KeyCodes.SHIFT // 16\nPhaser.Input.Keyboard.KeyCodes.CTRL // 17\nPhaser.Input.Keyboard.KeyCodes.ALT // 18\nPhaser.Input.Keyboard.KeyCodes.PAUSE // 19\nPhaser.Input.Keyboard.KeyCodes.CAPS_LOCK // 20\nPhaser.Input.Keyboard.KeyCodes.ESC // 27\nPhaser.Input.Keyboard.KeyCodes.SPACE // 32\nPhaser.Input.Keyboard.KeyCodes.PAGE_UP // 33\nPhaser.Input.Keyboard.KeyCodes.PAGE_DOWN // 34\nPhaser.Input.Keyboard.KeyCodes.END // 35\nPhaser.Input.Keyboard.KeyCodes.HOME // 36\nPhaser.Input.Keyboard.KeyCodes.LEFT // 37\nPhaser.Input.Keyboard.KeyCodes.UP // 38\nPhaser.Input.Keyboard.KeyCodes.RIGHT // 39\nPhaser.Input.Keyboard.KeyCodes.DOWN // 40\nPhaser.Input.Keyboard.KeyCodes.PRINT_SCREEN // 42\nPhaser.Input.Keyboard.KeyCodes.INSERT // 45\nPhaser.Input.Keyboard.KeyCodes.DELETE // 46\nPhaser.Input.Keyboard.KeyCodes.ZERO // 48\nPhaser.Input.Keyboard.KeyCodes.ONE // 49\nPhaser.Input.Keyboard.KeyCodes.TWO // 50\nPhaser.Input.Keyboard.KeyCodes.THREE // 51\nPhaser.Input.Keyboard.KeyCodes.FOUR // 52\nPhaser.Input.Keyboard.KeyCodes.FIVE // 53\nPhaser.Input.Keyboard.KeyCodes.SIX // 54\nPhaser.Input.Keyboard.KeyCodes.SEVEN // 55\nPhaser.Input.Keyboard.KeyCodes.EIGHT // 56\nPhaser.Input.Keyboard.KeyCodes.NINE // 57\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_ZERO // 96\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_ONE // 97\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_TWO // 98\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_THREE // 99\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_FOUR // 100\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_FIVE // 101\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_SIX // 102\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_SEVEN // 103\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_EIGHT // 104\nPhaser.Input.Keyboard.KeyCodes.NUMPAD_NINE // 105\nPhaser.Input.Keyboard.KeyCodes.A // 65\nPhaser.Input.Keyboard.KeyCodes.B // 66\nPhaser.Input.Keyboard.KeyCodes.C // 67\nPhaser.Input.Keyboard.KeyCodes.D // 68\nPhaser.Input.Keyboard.KeyCodes.E // 69\nPhaser.Input.Keyboard.KeyCodes.F // 70\nPhaser.Input.Keyboard.KeyCodes.G // 71\nPhaser.Input.Keyboard.KeyCodes.H // 72\nPhaser.Input.Keyboard.KeyCodes.I // 73\nPhaser.Input.Keyboard.KeyCodes.J // 74\nPhaser.Input.Keyboard.KeyCodes.K // 75\nPhaser.Input.Keyboard.KeyCodes.L // 76\nPhaser.Input.Keyboard.KeyCodes.M // 77\nPhaser.Input.Keyboard.KeyCodes.N // 78\nPhaser.Input.Keyboard.KeyCodes.O // 79\nPhaser.Input.Keyboard.KeyCodes.P // 80\nPhaser.Input.Keyboard.KeyCodes.Q // 81\nPhaser.Input.Keyboard.KeyCodes.R // 82\nPhaser.Input.Keyboard.KeyCodes.S // 83\nPhaser.Input.Keyboard.KeyCodes.T // 84\nPhaser.Input.Keyboard.KeyCodes.U // 85\nPhaser.Input.Keyboard.KeyCodes.V // 86\nPhaser.Input.Keyboard.KeyCodes.W // 87\nPhaser.Input.Keyboard.KeyCodes.X // 88\nPhaser.Input.Keyboard.KeyCodes.Y // 89\nPhaser.Input.Keyboard.KeyCodes.Z // 90\nPhaser.Input.Keyboard.KeyCodes.F1 // 112\nPhaser.Input.Keyboard.KeyCodes.F2 // 113\nPhaser.Input.Keyboard.KeyCodes.F3 // 114\nPhaser.Input.Keyboard.KeyCodes.F4 // 115\nPhaser.Input.Keyboard.KeyCodes.F5 // 116\nPhaser.Input.Keyboard.KeyCodes.F6 // 117\nPhaser.Input.Keyboard.KeyCodes.F7 // 118\nPhaser.Input.Keyboard.KeyCodes.F8 // 119\nPhaser.Input.Keyboard.KeyCodes.F9 // 120\nPhaser.Input.Keyboard.KeyCodes.F10 // 121\nPhaser.Input.Keyboard.KeyCodes.F11 // 122\nPhaser.Input.Keyboard.KeyCodes.F12 // 123\nPhaser.Input.Keyboard.KeyCodes.SEMICOLON // 186\nPhaser.Input.Keyboard.KeyCodes.PLUS // 187\nPhaser.Input.Keyboard.KeyCodes.COMMA // 188\nPhaser.Input.Keyboard.KeyCodes.MINUS // 189\nPhaser.Input.Keyboard.KeyCodes.PERIOD // 190\nPhaser.Input.Keyboard.KeyCodes.FORWARD_SLASH // 191\nPhaser.Input.Keyboard.KeyCodes.BACK_SLASH // 220\nPhaser.Input.Keyboard.KeyCodes.QUOTES // 222\nPhaser.Input.Keyboard.KeyCodes.BACKTICK // 192\nPhaser.Input.Keyboard.KeyCodes.OPEN_BRACKET // 219\nPhaser.Input.Keyboard.KeyCodes.CLOSED_BRACKET // 221\nPhaser.Input.Keyboard.KeyCodes.SEMICOLON_FIREFOX // 59\nPhaser.Input.Keyboard.KeyCodes.COLON // 58\nPhaser.Input.Keyboard.KeyCodes.COMMA_FIREFOX_WINDOWS // 60\nPhaser.Input.Keyboard.KeyCodes.COMMA_FIREFOX // 62\nPhaser.Input.Keyboard.KeyCodes.BRACKET_RIGHT_FIREFOX // 174\nPhaser.Input.Keyboard.KeyCodes.BRACKET_LEFT_FIREFOX // 175\n```\n\n## Phaser.Loader\n\n```js\nPhaser.Loader.LOADER_IDLE // 0\nPhaser.Loader.LOADER_LOADING // 1\nPhaser.Loader.LOADER_PROCESSING // 2\nPhaser.Loader.LOADER_COMPLETE // 3\nPhaser.Loader.LOADER_SHUTDOWN // 4\nPhaser.Loader.LOADER_DESTROYED // 5\nPhaser.Loader.FILE_PENDING // 10\nPhaser.Loader.FILE_LOADING // 11\nPhaser.Loader.FILE_LOADED // 12\nPhaser.Loader.FILE_FAILED // 13\nPhaser.Loader.FILE_PROCESSING // 14\nPhaser.Loader.FILE_ERRORED // 16\nPhaser.Loader.FILE_COMPLETE // 17\nPhaser.Loader.FILE_DESTROYED // 18\nPhaser.Loader.FILE_POPULATED // 19\n```\n\n## Phaser.Math\n\n```js\nPhaser.Math.PI2 // Math.PI * 2\nPhaser.Math.TAU // Math.PI * 0.5\nPhaser.Math.EPSILON // 1.0e-6\nPhaser.Math.DEG_TO_RAD // Math.PI / 180\nPhaser.Math.RAD_TO_DEG // 180 / Math.PI\nPhaser.Math.RND // null\nPhaser.Math.MIN_SAFE_INTEGER // 最小安全整数\nPhaser.Math.MAX_SAFE_INTEGER // 最大安全整数\n```\n\n## Phaser.Physics\n\n> 太多了，后面慢慢加\n\n## Phaser.Plugins\n\n```js\nPhaser.Plugins.CoreScene\nPhaser.Plugins.DefaultScene\nPhaser.Plugins.Global\n```\n\n## Phaser.Renderer\n\n> 暂无\n\n## Phaser.Scale\n\n```js\n// CenterType\nPhaser.Scale.NO_CENTER // 0\nPhaser.Scale.CENTER_BOTH // 1\nPhaser.Scale.CENTER_HORIZONTALLY // 2\nPhaser.Scale.CENTER_VERTICALLY // 3\n\n// ScaleModeTpe\nPhaser.Scale.NONE // 0\nPhaser.Scale.WIDTH_CONTROLS_HEIGHT // 1\nPhaser.Scale.HEIGHT_CONTROLS_WIDTH // 2\nPhaser.Scale.FIT // 3\nPhaser.Scale.ENVELOP // 4\nPhaser.Scale.RESIZE // 5\n\n// OrientationType\nPhaser.Scale.LANDSCAPE // 'landscape-primary'\nPhaser.Scale.PORTRAIT // 'portrait-primary'\n\n// ZoomType\nPhaser.Scale.NO_ZOOM // 1\nPhaser.Scale.ZOOM_2X // 2\nPhaser.Scale.ZOOM_4X // 4\nPhaser.Scale.MAX_ZOOM // -1\n```\n\n### Center\n\n```js\nPhaser.Scale.Center.NO_CENTER // 0\nPhaser.Scale.Center.CENTER_BOTH // 1\nPhaser.Scale.Center.CENTER_HORIZONTALLY // 2\nPhaser.Scale.Center.CENTER_VERTICALLY // 3\n```\n\n### Events\n\n```js\nPhaser.Scale.Events.ENTER_FULLSCREEN // enterfullscreen\nPhaser.Scale.Events.FULLSCREEN_FAILED // fullscreenfailed\nPhaser.Scale.Events.FULLSCREEN_UNSUPPORTED // fullscreenunsupported\nPhaser.Scale.Events.LEAVE_FULLSCREEN // leavefullscreen\nPhaser.Scale.Events.ORIENTATION_CHANGE // orientationchange\nPhaser.Scale.Events.RESIZE // resize\n```\n\n### Orientation\n\n```js\nPhaser.Scale.Orientation.LANDSCAPE // 'landscape-primary'\nPhaser.Scale.Orientation.PORTRAIT // 'portrait-primary'\n```\n\n### ScaleModes\n\n```js\nPhaser.Scale.ScaleModes.NONE // 0\nPhaser.Scale.ScaleModes.WIDTH_CONTROLS_HEIGHT // 1\nPhaser.Scale.ScaleModes.HEIGHT_CONTROLS_WIDTH // 2\nPhaser.Scale.ScaleModes.FIT // 3\nPhaser.Scale.ScaleModes.ENVELOP // 4\nPhaser.Scale.ScaleModes.RESIZE // 5\n```\n\n### Zoom\n\n```js\nPhaser.Scale.Zoom.NO_ZOOM // 1\nPhaser.Scale.Zoom.ZOOM_2X // 2\nPhaser.Scale.Zoom.ZOOM_4X // 4\nPhaser.Scale.Zoom.MAX_ZOOM // -1\n```\n\n## Phaser.ScaleModes\n\n```js\nPhaser.ScaleModes.DEFAULT // 0\nPhaser.ScaleModes.LINEAR // 0\nPhaser.ScaleModes.NEAREST // 1\n```\n\n## Phaser.Scenes\n\n```js\nPhaser.Scenes.PENDING // 0\nPhaser.Scenes.INIT // 1\nPhaser.Scenes.START // 2\nPhaser.Scenes.LOADING // 3\nPhaser.Scenes.CREATING // 4\nPhaser.Scenes.RUNNING // 5\nPhaser.Scenes.PAUSED // 6\nPhaser.Scenes.SLEEPING // 7\nPhaser.Scenes.SHUTDOWN // 8\nPhaser.Scenes.DESTROYED // 9\n```\n\n### Events\n\n```js\nPhaser.Scenes.Events.BOOT // boot\nPhaser.Scenes.Events.CREATE // create\nPhaser.Scenes.Events.DESTROY // destroy\nPhaser.Scenes.Events.PAUSE // pause\nPhaser.Scenes.Events.POST_UPDATE // postupdate\nPhaser.Scenes.Events.PRE_UPDATE // preupdate\nPhaser.Scenes.Events.READY // ready\nPhaser.Scenes.Events.RENDER // render\nPhaser.Scenes.Events.RESUME // resume\nPhaser.Scenes.Events.SHUTDOWN // shutdown\nPhaser.Scenes.Events.SLEEP // sleep\nPhaser.Scenes.Events.START // start\nPhaser.Scenes.Events.TRANSITION_COMPLETE // transitioncomplete\nPhaser.Scenes.Events.TRANSITION_INIT // transitioninit\nPhaser.Scenes.Events.TRANSITION_OUT // transitionout\nPhaser.Scenes.Events.TRANSITION_START // transitionstart\nPhaser.Scenes.Events.TRANSITION_WAKE // transitionwake\nPhaser.Scenes.Events.UPDATE // update\nPhaser.Scenes.Events.WAKE // wake\n```\n\n### Settings\n\n```js\nPhaser.Scenes.Settings.create(config)\n```\n\n## Phaser.Sound\n\n```js\nPhaser.Sound.SoundManagerCreator(game)\n```\n\n### Events\n\n```js\nPhaser.Sound.Events.COMPLETE // complete\nPhaser.Sound.Events.DECODED_ALL // decodedall\nPhaser.Sound.Events.DECODED // decoded\nPhaser.Sound.Events.DESTROY // destroy\nPhaser.Sound.Events.DETUNE // detune\nPhaser.Sound.Events.GLOBAL_DETUNE // detune\nPhaser.Sound.Events.GLOBAL_MUTE // mute\nPhaser.Sound.Events.GLOBAL_RATE // rate\nPhaser.Sound.Events.GLOBAL_VOLUME // volume\nPhaser.Sound.Events.LOOP // loop\nPhaser.Sound.Events.LOOPED // looped\nPhaser.Sound.Events.MUTE // mute\nPhaser.Sound.Events.PAUSE_ALL // pauseall\nPhaser.Sound.Events.PAUSE // pause\nPhaser.Sound.Events.PLAY // play\nPhaser.Sound.Events.RATE // rate\nPhaser.Sound.Events.RESUME_ALL // resumeall\nPhaser.Sound.Events.RESUME // resume\nPhaser.Sound.Events.SEEK // seek\nPhaser.Sound.Events.STOP_ALL // stopall\nPhaser.Sound.Events.STOP // stop\nPhaser.Sound.Events.UNLOCKED // unlocked\nPhaser.Sound.Events.VOLUME // volume\n```\n\n## Phaser.Structs\n\n> 结构体\n\n### Events\n\n```js\nPhaser.Structs.PROCESS_QUEUE_ADD // add\nPhaser.Structs.PROCESS_QUEUE_REMOVE // remove\n```\n\n## Phaser.Textures\n\n```js\nPhaser.Textures.LINEAR\nPhaser.Textures.NEAREST\n```\n\n### Events\n\n```js\nPhaser.Textures.Events.ADD // addtexture\nPhaser.Textures.Events.ERROR // onerror\nPhaser.Textures.Events.LOAD // onload\nPhaser.Textures.Events.READY // ready\nPhaser.Textures.Events.REMOVE // removetexture\n```\n\n### FilterMode\n\n```js\nPhaser.Textures.FilterMode.LINEAR // 0\nPhaser.Textures.FilterMode.NEAREST // 1\n```\n\n## Phaser.Tilemaps\n\n```js\nPhaser.Tilemaps.ParseToTilemap(scene [, key] [, tileWidth] [, tileHeight] [, width] [, height] [, data] [, insertNull])\n```\n\n### Formats\n\n```js\nPhaser.Tilemaps.Formats.CSV // 0\nPhaser.Tilemaps.Formats.TILED_JSON // 1\nPhaser.Tilemaps.Formats.ARRAY_2D // 2\nPhaser.Tilemaps.Formats.WELTMEISTER // 3\n```\n\n## Phaser.Time\n\n> 暂无\n\n## Phaser.Tweens\n\n```js\nPhaser.Tweens.CREATED // 0\nPhaser.Tweens.INIT // 1\nPhaser.Tweens.DELAY // 2\nPhaser.Tweens.OFFSET_DELAY // 3\nPhaser.Tweens.PENDING_RENDER // 4\nPhaser.Tweens.PLAYING_FORWARD // 5\nPhaser.Tweens.PLAYING_BACKWARD // 6\nPhaser.Tweens.HOLD_DELAY // 7\nPhaser.Tweens.REPEAT_DELAY // 8\nPhaser.Tweens.COMPLETE // 9\nPhaser.Tweens.PENDING_ADD // 20\nPhaser.Tweens.PAUSED // 21\nPhaser.Tweens.LOOP_DELAY // 22\nPhaser.Tweens.ACTIVE // 23\nPhaser.Tweens.COMPLETE_DELAY // 24\nPhaser.Tweens.PENDING_REMOVE // 25\nPhaser.Tweens.REMOVED // 26\n```\n\n### Events\n\n```js\nPhaser.Tweens.Events.TIMELINE_COMPLETE // complete\nPhaser.Tweens.Events.TIMELINE_LOOP // loop\nPhaser.Tweens.Events.TIMELINE_PAUSE // pause\nPhaser.Tweens.Events.TIMELINE_RESUME // resume\nPhaser.Tweens.Events.TIMELINE_START // start\nPhaser.Tweens.Events.TIMELINE_UPDATE // update\nPhaser.Tweens.Events.TWEEN_ACTIVE // active\nPhaser.Tweens.Events.TWEEN_COMPLETE // complete\nPhaser.Tweens.Events.TWEEN_LOOP // loop\nPhaser.Tweens.Events.TWEEN_REPEAT // repeat\nPhaser.Tweens.Events.TWEEN_START // start\nPhaser.Tweens.Events.TWEEN_UPDATE // update\nPhaser.Tweens.Events.TWEEN_YOYO // yoyo\n```\n\n## Phaser.Utils\n\n> 暂无\n"}))},{id:302,parentId:300,text:"Static Method",path:"/const/staticmethod",component:()=>t.createElement(t.Fragment,null,t.createElement(q,{source:"## Phaser\n\n> 暂无\n\n## Phaser.Actions\n\n```js\nPhaser.Actions.Angle(items, value [,step] [,index] [,direction]) // 批量操作角度\nPhaser.Actions.Call(items, callback, context) // 遍历回调\nPhaser.Actions.GetFirst(items, compare [,index]) // 查找第一个符合属性值为 compare 属性的对象\nPhaser.Actions.GetLast(items, compare [,index]) //  查找最后一个符合属性值为 compare 属性的对象\nPhaser.Actions.GridAlign(items, options) // 对数组元素排列\nPhaser.Actions.IncAlpha(items, value [,step] [,index] [,direction]) // 设置透明度\nPhaser.Actions.IncXY(items, x [,y] [,stepX] [,stepY] [,index] [,direction]) // 批量设置 x、y 坐标\nPhaser.Actions.IncX(items, value [,step] [,index] [,direction]) // 批量设置 x 坐标\nPhaser.Actions.IncY(items, value [,step] [,index] [,direction]) // 批量设置 y 坐标\nPhaser.Actions.PlaceOnCircle(items, circle [,startAngle] [,endAngle]) // 在圆轨迹上置放精灵\nPhaser.Actions.PlaceOnEllipse(items, ellipse [,startAngle] [,endAngle]) // 在椭圆轨迹上置放精灵\nPhaser.Actions.PlaceOnLine(items, line) // 在线轨迹上置放精灵\nPhaser.Actions.PlaceOnRrectangle(items, rect [,shift]) // 在矩形轨迹置放精灵\nPhaser.Actions.PlaceOnTriangle(items, triangle [,stepRate]) // 在三角形轨迹置放精灵\nPhaser.Actions.PlayAnimation(items, key [,startFrame]) // 播放动画\nPhaser.Actions.PropertyValueInc(items, key, value [,step] [,index] [,direction])// 递增属性值\nPhaser.Actions.PropertyValueSet(items, key, value [,step] [,index] [,direction]) // 设置属性值\nPhaser.Actions.RandomCircle(items, circle) // 精灵随机置放在圆圈内\nPhaser.Actions.RandomEllipse(items, ellipse) // 精灵随机置放在椭圆内\nPhaser.Actions.RandomLine(items, line) // 精灵随机置放在线上\nPhaser.Actions.RandomRectangle(items, rect) // 精灵随机置放在矩形中\nPhaser.Actions.RandomTriangle(items, triangle) // 精灵随机置放在三角形中\nPhaser.Actions.Rotate(items, value [,step] [,index] [,direction]) // 精灵自旋转\nPhaser.Actions.RotateAround(items, point, angle) // 精灵在圆圈内绕圆心旋转\nPhaser.Actions.RotateAroundDistance(items, point, angle, distance) // 精灵在圆圈轨迹上绕圆心旋转\nPhaser.Actions.ScaleXY(items, scaleX [,scaleY] [,stepX] [,stepY] [,index] [,direction])// 缩放\nPhaser.Actions.ScaleX(items, value [,step] [,index] [,direction]) // 横向缩放精灵\nPhaser.Actions.ScaleY(items, value [,step] [,index] [,direction]) // 纵向缩放精灵\nPhaser.Actions.SetAlpha(items, value [,step] [,index] [,direction]) // 设置透明度\nPhaser.Actions.SetBlendMode(items, value [,index] [,direction]) // 设置混合模式\nPhaser.Actions.SetDepth(items, value [,step] [,index] [,direction]) // 设置层级\nPhaser.Actions.SetHitArea(items, hitArea, hitAreaCallback) // 输入指定区域触发\nPhaser.Actions.SetOrigin(items, originX [,originY] [,stepX] [,stepY] [,index] [,direction])\nPhaser.Actions.SetRotation(items, value [,step] [,index] [,direction]) // 设置旋转\nPhaser.Actions.SetScale(items, scaleX [,scaleY] [,stepX] [,stepY] [,index] [,direction])\nPhaser.Actions.SetScaleX(items, value [,step] [,index] [,direction])\nPhaser.Actions.SetScaleY(items, value [,step] [,index] [,direction])\nPhaser.Actions.SetScrollFactor(items, scrollFactorX [,scrollFactorY] [,stepX] [,stepY] [,index] [,direction])\nPhaser.Actions.SetScrollFactorX(items, value [,step] [,index] [,direction])\nPhaser.Actions.SetScrollFactorY(items, value [,step] [,index] [,direction])\nPhaser.Actions.SetTint(items, topLeft [,topRight] [,bottomLeft] [,bottomRight]) // 色彩\nPhaser.Actions.SetVisible(items, value [,index] [,direction]) // 隐藏显示\nPhaser.Actions.SetXY(items, x [,y] [,stepX] [,stepY] [,index] [,direction])\nPhaser.Actions.SetX(items, value [,step] [,index] [,direction])\nPhaser.Actions.SetY(items, value [,step] [,index] [,direction])\nPhaser.Actions.ShiftPosition(items, x, y [,direction] [,output]) // 变换位置\nPhaser.Actions.Shuffle(items) // 洗牌\nPhaser.Actions.SmootherStep(items, property, min, max [,inc]) // 平滑过渡设置值\nPhaser.Actions.SmoothStep(items, property, min, max [,inc]) // 平滑过度设置值\nPhaser.Actions.Spread(items, property, min, max [,inc]) // 传播过渡2个值\nPhaser.Actions.ToggleVisible(items) // 切换显示状态\nPhaser.Actions.WrapInRectangle(items, rect [,padding]) // 在矩形内\n```\n\n## Phaser.Animations\n\n> 暂无\n\n## Phaser.BlendModes\n\n> 暂无\n\n## Phaser.Cache\n\n> 暂无\n\n## Phaser.Cameras\n\n> 暂无\n\n## Phaser.Core\n\n> 暂无\n\n## Phaser.Create\n\n```js\nPhaser.Create.Palettes.ARNE16() // 调色板\nPhaser.Create.Palettes.C64() // 调色板\nPhaser.Create.Palettes.CGA() // 调色板\nPhaser.Create.Palettes.JMP() // 调色板\nPhaser.Create.Palettes.MSX() // 调色板\n```\n\n## Phaser.Curves\n\n> 暂无\n\n## Phaser.Data\n\n> 暂无\n\n## Phaser.Device\n\n> 暂无\n\n## Phaser.Display\n\n### Align\n\n> 对齐\n\n#### In\n\n> 在一个对象内\n\n```js\nPhaser.Display.Align.In.BottomLeft(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.BottomRight(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.TopLeft(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.TopRight(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.LeftCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.RightCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.TopCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.BottomCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.Center(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.QuickSet(childObject, parentObject, ALIGN_CONST [,offsetX] [,offsetY])\n```\n\n### To\n\n> 在一个对象外侧\n\n```js\nPhaser.Display.Align.In.BottomCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.BottomLeft(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.BottomRight(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.LeftCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.LeftTop(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.LeftBottom(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.RightCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.RightTop(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.RightBottom(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.TopCenter(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.TopLeft(childObject, parentObject [,offsetX] [,offsetY])\nPhaser.Display.Align.In.TopRight(childObject, parentObject [,offsetX] [,offsetY])\n```\n\n### Bounds\n\n> 界限\n\n```js\nPhaser.Display.Bounds.CenterOn(gameObject, x, y)\nPhaser.Display.Bounds.GetBottom(gameObject)\nPhaser.Display.Bounds.GetCenterY(gameObject)\nPhaser.Display.Bounds.GetLeft(gameObject)\nPhaser.Display.Bounds.GetRight(gameObject)\nPhaser.Display.Bounds.GetOffsetX(gameObject)\nPhaser.Display.Bounds.GetOffsetY(gameObject)\nPhaser.Display.Bounds.GetTop(gameObject)\n\nPhaser.Display.Bounds.SetCenterX(gameObject, x)\nPhaser.Display.Bounds.SetCenterY(gameObject, y)\nPhaser.Display.Bounds.SetLeft(gameObject, value)\nPhaser.Display.Bounds.SetRight(gameObject, value)\nPhaser.Display.Bounds.SetTop(gameObject, value)\n```\n\n### Canvas\n\n```js\nPhaser.Display.Canvas.TouchAction(canvas [,value])\nPhaser.Display.Canvas.UserSelect(canvas [,value])\n```\n\n#### CanvasInterpolation\n\n```js\nPhaser.Display.Canvas.CanvasInterpolation.setBicubic(canvas)\nPhaser.Display.Canvas.CanvasInterpolation.setCrisp(canvas)\n```\n\n#### CanvasPool\n\n```js\nPhaser.Display.Canvas.CanvasPool.create(parent [,width] [,height] [,canvasType] [,selfParent])\nPhaser.Display.Canvas.CanvasPool.create2D(parent [,width] [,height])\nPhaser.Display.Canvas.CanvasPool.createWebGL(parent [,width] [,height])\nPhaser.Display.Canvas.CanvasPool.disableSmoothing()\nPhaser.Display.Canvas.CanvasPool.enableSmoothing()\nPhaser.Display.Canvas.CanvasPool.first([canvasType])\nPhaser.Display.Canvas.CanvasPool.free()\nPhaser.Display.Canvas.CanvasPool.remove(parent)\nPhaser.Display.Canvas.CanvasPool.total()\n```\n\n#### Smoothing\n\n```js\nPhaser.Display.Canvas.Smoothing.disable(context)\nPhaser.Display.Canvas.Smoothing.enable(context)\nPhaser.Display.Canvas.Smoothing.getPrefix(context)\nPhaser.Display.Canvas.Smoothing.isEnabled(context)\n```\n\n### Color\n\n```js\nPhaser.Display.Color.ColorToRGBA(color)\nPhaser.Display.Color.ComponentToHex(color)\nPhaser.Display.Color.GetColor(red, green, blue)\nPhaser.Display.Color.GetColor32(red, green, blue, alpha)\nPhaser.Display.Color.HexStringToColor(hex)\nPhaser.Display.Color.HSLToColor(h, s, l)\nPhaser.Display.Color.HSVColorWheel([s] [,v])\nPhaser.Display.Color.HSVToRGB(h, s, l [,out])\nPhaser.Display.Color.HueToComponent(p, q, t)\nPhaser.Display.Color.IntegerToColor(input)\nPhaser.Display.Color.IntegerToRGB(input)\nPhaser.Display.Color.ObjectToColor(input)\nPhaser.Display.Color.RandomRGB([min] [,max])\nPhaser.Display.Color.RGBStringToColor(rgb)\nPhaser.Display.Color.RGBToHSV(r, g, b [,out])\nPhaser.Display.Color.RGBToString(r, g, b [,a] [,prefix])\nPhaser.Display.Color.ValueToColor(input)\n```\n\n## Phaser.DOM\n\n```js\nPhaser.DOM.AddToDOM(element [,parent])\nPhaser.DOM.DOMContentLoaded(callback)\nPhaser.DOM.GetInnerHeight(iOS)\nPhaser.DOM.GetScreenOrientation(width, height)\nPhaser.DOM.GetTarget(element)\nPhaser.DOM.ParseXML(data)\nPhaser.DOM.RemoveFromDOM(element)\n```\n\n## Phaser.Events\n\n> 暂无\n\n## Phaser.GameObjects\n\n```js\nPhaser.GameObjects.BuildGameObject(scene, gameObject, config)\nPhaser.GameObjects.BuildGameObjectAnimation(sprite, config)\n```\n\n## Phaser.Geom\n\n### Circle\n\n```js\nPhaser.Geom.Circle.Area(circle) // 圆面积\nPhaser.Geom.Circle.Circumference(circle) // 圆周长\nPhaser.Geom.Circle.CircumferencePoint(circle, Phasr.Math.PI2, point) // 在圆上的点，可以是矩形、圆形\nPhaser.Geom.Circle.Clone(source) // 克隆一个圆\nPhaser.Geom.Circle.Contains(circle, x, y) // 点是否在圆中\nPhaser.Geom.Circle.ContainsPoint(circle, point) // 点是否在圆中\nPhaser.Geom.Circle.ContainsRect(circle, rect) // 矩形是否在圆中\nPhaser.Geom.Circle.CopyFrom(source, dest) // 小圆填充到大圆中\nPhaser.Geom.Circle.Equals(circle1, circle2) // 比较两圆大小是否相等\nPhaser.Geom.Circle.GetBounds(circle [,out]) // 获取圆的外层矩形对象\nPhaser.Geom.Circle.GetPoint(circle, position [,out]) // 根据弧度获取圆上的点\nPhaser.Geom.Circle.GetPoints(circle, quantity [,stepRate] [,output])\nPhaser.Geom.Circle.Offset(circle, xOffset, yOffset) // 同 OffsetPoint\nPhaser.Geom.Circle.OffsetPoint(circle, point) // 圆相对点的纵横偏移\nPhaser.Geom.Circle.Random(circle [,out])\n```\n\n### Ellipse\n\n```js\nPhaser.Geom.Ellipse.Area(ellipse) // 面积\nPhaser.Geom.Ellipse.Circumference(ellipse) // 周长\nPhaser.Geom.Ellipse.CircumferencePoint(ellipse, Phasr.Math.PI2, point) // 在上面的点，可以是矩形、圆形\nPhaser.Geom.Ellipse.Clone(source) // 克隆\nPhaser.Geom.Ellipse.Contains(ellipse, x, y) // 点是否在其中\nPhaser.Geom.Ellipse.ContainsPoint(ellipse, point) // 点是否在其中\nPhaser.Geom.Ellipse.ContainsRect(ellipse, rect) // 矩形是否在其中\nPhaser.Geom.Ellipse.CopyFrom(source, dest)\nPhaser.Geom.Ellipse.Equals(ellipse1, ellipse2) // 比较两个大小是否相等\nPhaser.Geom.Ellipse.GetBounds(ellipse [,out]) // 获取外层矩形对象\nPhaser.Geom.Ellipse.GetPoint(ellipse, position [,out]) // 根据弧度获取上面的点\nPhaser.Geom.Ellipse.GetPoints(ellipse, quantity [,stepRate] [,output])\nPhaser.Geom.Ellipse.Offset(ellipse, xOffset, yOffset) // 同 OffsetPoint\nPhaser.Geom.Ellipse.OffsetPoint(ellipse, point) // 相对点的纵横偏移\nPhaser.Geom.Ellipse.Random(ellipse [,out])\n```\n\n### Line\n\n```js\nPhaser.Geom.Line.Angle(line) // 角度\nPhaser.Geom.Line.BresenhamPoints(line [,stepRate] [,results]) // 线上的所有点\nPhaser.Geom.Line.CenterOn(line, x, y) // 线的中点在指定点\nPhaser.Geom.Line.Clone(source) // 克隆\nPhaser.Geom.Line.CopyFrom(source, dest)\nPhaser.Geom.Line.Equals(line1, line2) // 比较两个大小是否相等\nPhaser.Geom.Line.Extend(line, left [,right]) // 延伸\nPhaser.Geom.Line.GetMidPoint(line [,out]) // 获取中点坐标\nPhaser.Geom.Line.GetNearestPoint(line, point [,out]) // 获取垂直的点\nPhaser.Geom.Line.GetNormal(line [,out]) // 法线\nPhaser.Geom.Line.GetPoint(line, position [,out]) // 获取点\nPhaser.Geom.Line.GetPoints(line, quantity [,stepRate] [,output]) // 获取多个点\nPhaser.Geom.Line.GetShortestDistance(line, point) // 线点距离\nPhaser.Geom.Line.Width(line) // 高度\nPhaser.Geom.Line.Height(line) // 高度\nPhaser.Geom.Line.Length(line) // 长度\nPhaser.Geom.Line.NormalAngle(line) // 法线角度\nPhaser.Geom.Line.NormalX(line)\nPhaser.Geom.Line.NormalY(line)\nPhaser.Geom.Line.Offset(line, x, y)\nPhaser.Geom.Line.PerpSlope(line) // 垂直斜率\nPhaser.Geom.Line.Random(line [,out])\nPhaser.Geom.Line.ReflectAngle(lineA, lineB) // 两线之间的反射角\nPhaser.Geom.Line.Rotate(line, angle) // 旋转\nPhaser.Geom.Line.RotateAroundPoint(line, point, angle) // 旋转圆点\nPhaser.Geom.Line.RotateAroundXY(line, x, y, angle)\nPhaser.Geom.Line.SetToAngle(line, x, y, angle, length)\nPhaser.Geom.Line.Slope(line)\n```\n\n### Point\n\n```js\nPhaser.Geom.Point.Ceil(point)\nPhaser.Geom.Point.Floor(point)\nPhaser.Geom.Point.Clone(source)\nPhaser.Geom.Point.CopyFrom(source, dest)\nPhaser.Geom.Point.Equals(point, toCompare) // 相等\nPhaser.Geom.Point.GetCentroid(points [,out]) // 获取到质心\nPhaser.Geom.Point.GetMagnitude(point) // 原点到点的长度\nPhaser.Geom.Point.GetMagnitudeSq(point) // 点的大小的平方\nPhaser.Geom.Point.GetRectangleFromPoints(points [,out]) // 对齐\nPhaser.Geom.Point.Interpolate(pointA, pointB [,t] [,out])\nPhaser.Geom.Point.Invert(point) // 交换点的 x，y 坐标\nPhaser.Geom.Point.Negative(point) // 反转一个点的坐标\nPhaser.Geom.Point.Project(pointA, pointB [,out])\nPhaser.Geom.Point.ProjectUnit(pointA, pointB [,out])\nPhaser.Geom.Point.SetMagnitude(point, magnitude) // 改变二维矢量的大小\n```\n\n### Polygon\n\n```js\nPhaser.Geom.Polygon.Clone(polygon)\nPhaser.Geom.Polygon.Contains(polygon, x, y)\nPhaser.Geom.Polygon.ContainsPoint(polygon, point)\nPhaser.Geom.Polygon.GetAABB(polygon [,out]) // 获取多边形的边界 AABB 矩形\nPhaser.Geom.Polygon.GetNumberArray(polygon [,output]) // 存储多边形的所有点坐标\nPhaser.Geom.Polygon.Reverse(polygon) // 反转多边形点的顺序\nPhaser.Geom.Polygon.GetPoints(polygon, quantity [,stepRate] [,output])\nPhaser.Geom.Polygon.Perimeter(polygon) // 周长\nPhaser.Geom.Polygon.Smooth(polygon) // 对点应用 Chaikin 平滑算法\n```\n\n### Rectangle\n\n```js\nPhaser.Geom.Rectangle.Area(rect) // 面积\nPhaser.Geom.Rectangle.Ceil(rect) // 坐标为整数\nPhaser.Geom.Rectangle.CeilAll(rect)\nPhaser.Geom.Rectangle.Floor(rect)\nPhaser.Geom.Rectangle.FloorAll(rect)\nPhaser.Geom.Rectangle.CenterOn(rect, x, y) // 移动左上角到x, y坐标上\nPhaser.Geom.Rectangle.Clone(source)\nPhaser.Geom.Rectangle.Contains(rect, x, y)\nPhaser.Geom.Rectangle.ContainsPoint(rect, point)\nPhaser.Geom.Rectangle.ContainsRect(rectA, reactB)\nPhaser.Geom.Rectangle.CopyFrom(source, dest)\nPhaser.Geom.Rectangle.Decompose(rect [,out]) // 每个点坐标添加到一个数组中\nPhaser.Geom.Rectangle.Equals(rect, toCompare) // 相等\nPhaser.Geom.Rectangle.FitInside(target, source) // 保持长宽比在父容器中\nPhaser.Geom.Rectangle.FitOutside(target, source) // 保持长宽比铺盖全父容器\nPhaser.Geom.Rectangle.FromPoints(points [,out]) // 点都在矩形边上\nPhaser.Geom.Rectangle.GetAspectRatio(rect) // 矩形宽高比\nPhaser.Geom.Rectangle.GetCenter(rect [,out]) // 获取矩形的中心\nPhaser.Geom.Rectangle.GetPoint(rectangle, position [,out]) // 获取矩形一个点\nPhaser.Geom.Rectangle.GetPoints(rectangle, step, quantity [,out])\nPhaser.Geom.Rectangle.GetSize(rect [,out]) // 获取矩形大小，返回width, height\nPhaser.Geom.Rectangle.Inflate(rect, x, y) // 中心不变长宽变\nPhaser.Geom.Rectangle.Intersection(rectA, rectB) // 矩形的相交区域\nPhaser.Geom.Rectangle.MarchingAnts(rect, step, quantity [,out]) // 矩形周长间隔的点数组\nPhaser.Geom.Rectangle.MergePoints(target, points) // 让点全在矩形边界上或边界内\nPhaser.Geom.Rectangle.MergeRect(target, source)\nPhaser.Geom.Rectangle.MergeXY(target, x, y)\nPhaser.Geom.Rectangle.Offset(rect, x, y)\nPhaser.Geom.Rectangle.OffsetPoint(rect, point)\nPhaser.Geom.Rectangle.Overlaps(rectA, rectB) // 重叠为true\nPhaser.Geom.Rectangle.Perimeter(rect) // 周长\nPhaser.Geom.Rectangle.PerimeterPoint(rectangle, angle [,out])\nPhaser.Geom.Rectangle.Random(rect, out) // 矩形中的随机点\nPhaser.Geom.Rectangle.RandomOutside(outer, inner [,out])  // 外部矩形里，不在内矩形中的区域\nPhaser.Geom.Rectangle.SameDimensions(rect, toCompare) // 严格相等的宽度和调试\nPhaser.Geom.Rectangle.Scale(rect, x, y)\nPhaser.Geom.Rectangle.Union(rectA, rectB [,out]) // 包括这2个矩形的大矩形\n```\n\n### Triangle\n\n```js\nPhaser.Geom.Triangle.Area(triangle) // 面积\nPhaser.Geom.Triangle.BuildEquilateral(x, y, length) // 正三角形\nPhaser.Geom.Triangle.BuildFromPolygon(data [,holes] [,scaleX] [,scaleY] [,out]) // 3点构建一个三角形\nPhaser.Geom.Triangle.BuildRight(x, y, width, height) // 直角三角形\nPhaser.Geom.Triangle.CenterOn(triangle, x, y [,centerFunc]) // 以给定的点为中心\nPhaser.Geom.Triangle.Centroid(triangle [,out]) // 获取质心（重心）\nPhaser.Geom.Triangle.CircumCenter(triangle [,out]) // 获取外圆圆心\nPhaser.Geom.Triangle.InCenter(triangle [,out]) // 内圆中心\nPhaser.Geom.Triangle.CircumCircle(triangle [,out]) // 外接圆\nPhaser.Geom.Triangle.Clone(source)\nPhaser.Geom.Triangle.Contains(triangle, x, y)\nPhaser.Geom.Triangle.ContainsArray(triangle, points [,returnFirst] [,out])\nPhaser.Geom.Triangle.ContainsPoint(triangle, point)\nPhaser.Geom.Triangle.CopyFrom(source, dest)\nPhaser.Geom.Triangle.Decompose(triangle [,out]) // 分解成点数组\nPhaser.Geom.Triangle.Equals(triangle, toCompare)\nPhaser.Geom.Triangle.GetPoint(triangle, position [,out])\nPhaser.Geom.Triangle.GetPoints(triangle, quantity, stepRate [,out])\nPhaser.Geom.Triangle.Offset(triangle, x, y)\nPhaser.Geom.Triangle.Perimeter(triangle) // 周长\nPhaser.Geom.Triangle.Random(triangle [,out])\nPhaser.Geom.Triangle.Rotate(triangle, angle)\nPhaser.Geom.Triangle.RotateAroundPoint(triangle, point, angle) // 指定点旋转\nPhaser.Geom.Triangle.RotateAroundXY(triangle, x, y, angle) // 指定点旋转\n```\n\n### Intersects\n\n> 相交\n\n```js\nPhaser.Geom.Intersects.CircleToCircle(circleA, circleB) // 两圆相交\nPhaser.Geom.Intersects.CircleToRectangle(circle, rect) // 圆与矩形相交\nPhaser.Geom.Intersects.GetCircleToCircle(circle, rect [,out]) // 获取相交点 Point 对象数组\nPhaser.Geom.Intersects.GetCircleToRectangle(circle, rect [,out]) // 获取相交点 Point 对象数组\nPhaser.Geom.Intersects.GetLineToCircle(line, circle [,out]) // 获取相交点 Point 对象数组\nPhaser.Geom.Intersects.GetLineToRectangle(line, rect [,out]) // 获取相交点 Point 对象数组\nPhaser.Geom.Intersects.GetRectangleIntersection(rectA, rectB [,output]) // 获取两个矩形相交点 Point 对象数组\nPhaser.Geom.Intersects.GetRectangleToRectangle(rectA, rectB [,output]) // 获取两个矩形相交点 Point 对象数组\nPhaser.Geom.Intersects.GetRectangleToTriangle(rect, triangle [,out]) // 获取相交点Point对象数组\nPhaser.Geom.Intersects.GetTriangleToCircle(triangle, circle [,out]) // 获取相交点Point对象数组\nPhaser.Geom.Intersects.GetTriangleToLine(triangle, line [,out]) // 获取相交点Point对象数组\nPhaser.Geom.Intersects.LineToCircle(line, circle [,nearest]) // 相交\nPhaser.Geom.Intersects.LineToLine(line1, line2 [,out])// 相交\nPhaser.Geom.Intersects.LineToRectangle(line, rect)// 相交\nPhaser.Geom.Intersects.PointToLine(point, line [,lineThickness])// 点在线上\nPhaser.Geom.Intersects.PointToLineSegment(point, line) // 点在线段上\nPhaser.Geom.Intersects.RectangleToRectangle(rectA, rectB) // 相交\nPhaser.Geom.Intersects.RectangleToTriangle(rect, triangle) // 相交\nPhaser.Geom.Intersects.RectangleToValues(rect, left, right, top, bottom [,tolerance]) // 矩形与值相交\nPhaser.Geom.Intersects.TriangleToCircle(triangle, circle) // 相交\nPhaser.Geom.Intersects.TriangleToLine(triangle, line) // 相交\nPhaser.Geom.Intersects.TriangleToTriangle(triangleA, triangleB) // 相交\n```\n\n## Phaser.Input\n\n```js\nPhaser.Input.CreateInteractiveObject(gameObject, hitArea, hitAreaCallback)\nPhaser.Input.CreatePixelPerfectHandler(textureManager, alphaTolerance)\n```\n\n### InputPluginCache\n\n```js\nPhaser.Input.InputPluginCache.getCore()\nPhaser.Input.InputPluginCache.install()\nPhaser.Input.InputPluginCache.register()\nPhaser.Input.InputPluginCache.remove()\n```\n\n### Keyboard\n\n```js\nPhaser.Input.Keyboard.DownDuration(key [,duration]) // duration 时间内按下为true\nPhaser.Input.Keyboard.JustDown(key) // 快速按下为true\nPhaser.Input.Keyboard.JustUp(key) // 快速抬起为 true\nPhaser.Input.Keyboard.UpDuration(key [,duration]) // duration 时间内抬起为true\n```\n\n## Phaser.Loader\n\n> 暂无\n\n### File\n\n```js\nPhaser.Loader.File.createObjectURL(image, blob, defaultType)\nPhaser.Loader.File.revokeObjectURL(image)\n```\n\n### Events\n\n```js\nPhaser.Loader.Events.ADD // addfile\nPhaser.Loader.Events.COMPLETE // complete\nPhaser.Loader.Events.FILE_COMPLETE // filecomplete\nPhaser.Loader.Events.FILE_KEY_COMPLETE // filecomplete-\nPhaser.Loader.Events.FILE_LOAD_ERROR // loaderror\nPhaser.Loader.Events.FILE_LOAD // load\nPhaser.Loader.Events.FILE_PROGRESS // fileprogress\nPhaser.Loader.Events.POST_PROCESS // postprocess\nPhaser.Loader.Events.PROGRESS // progress\nPhaser.Loader.Events.START // start\n```\n\n### FileTypesManager\n\n```js\nPhaser.Loader.FileTypesManager.destroy()\nPhaser.Loader.FileTypesManager.install(loader)\nPhaser.Loader.FileTypesManager.register(key, factoryFunction)\n```\n\n## Phaser.Math\n\n```js\nPhaser.Math.Average(values) // 平均数\nPhaser.Math.Bernstein(n, i) // 整数 n > i 伯恩斯坦多项式 贝塞尔曲线的函数形式\nPhaser.Math.Between(min, max) // 最小值和最大值之间的随机整数 包括\nPhaser.Math.CatmullRom(t, p0, p1, p2, p3) // 计算 Catmull-Rom 值\nPhaser.Math.CeilTo(value [,place] [,base]) // Math.ceil(value*Math.pow(base, -place))/Math.pow(base, -place)\nPhaser.Math.FloorTo(value [,place] [,base]) // 同 CeilTo\nPhaser.Math.Clamp(value, min, max) // 值只能在最小到最大值中一个\nPhaser.Math.DegToRad(degress) // 角度转弧度\nPhaser.Math.Difference(a, b) // 两值之间的正差\nPhaser.Math.Factorial(value) // 阶乘\nPhaser.Math.FloatBetween(min, max) // 随机浮点数，包括min，不包括max\nPhaser.Math.FromPercent(percent, min [,max]) // 根据大小差值 * percent\nPhaser.Math.GetSpeed(distance, time) // 根据距离与时间获取速度\nPhaser.Math.IsEven(value) // 检查是否为偶数\nPhaser.Math.IsEvenStrict(value) // 严格检查是否为偶数\nPhaser.Math.Linear(p0, p1, t) // 计算  t 上的线性值\nPhaser.Math.MaxAdd(value, amount, max) // 两值相加， 小于最大值\nPhaser.Math.MinSub(value, amount, min) // 两值相减，大于最小值\nPhaser.Math.Percent(value, min [,max] [,upperMax]) // 值在最小与最大间的百分占比\nPhaser.Math.RadToDeg(radians) // 弧度转角度\nPhaser.Math.RandomXY(vector [,scale])\nPhaser.Math.RandomXYZ(vec3 [,radius])\nPhaser.Math.RandomXYZW(vec4 [,scale])\nPhaser.Math.Rotate(point, angle)\nPhaser.Math.RotateAround(point, x, y, angle)\nPhaser.Math.RotateAroundDistance(point, x, y, angle, distance)\nPhaser.Math.RotateVec3(vec, axis, radians)\nPhaser.Math.RoundAwayFromZero(value)\nPhaser.Math.RoundTo(value [,place] [,base])\nPhaser.Math.SinCosTableGenerator(length [,sinAmp] [,cosAmp] [,frequency])\nPhaser.Math.SmootherStep(x, min, max)\nPhaser.Math.SmoothStep(x, min, max)\nPhaser.Math.ToXY(index, width, height [,out])\nPhaser.Math.TransformXY(x, y, positionX, positionY, rotation, scaleX, scaleY [, output])\nPhaser.Math.Within(a, b, tolerance) // 检查两值是否在公差差\nPhaser.Math.Wrap(value, min, max) // 在min max之间等数算加\n```\n\n### Angle\n\n> 角度\n\n```js\nPhaser.Math.Angle.Between(x1, y1, x2, y2)\nPhaser.Math.Angle.BetweenPoints(point1, point2)\nPhaser.Math.Angle.BetweenPointsY(point1, point2)\nPhaser.Math.Angle.BetweenY(x1, y1, x2, y2)\nPhaser.Math.Angle.CounterClockwise(angle)\nPhaser.Math.Angle.Normalize(angle)\nPhaser.Math.Angle.Reverse(angle)\nPhaser.Math.Angle.RotateTo(currentAngle, targetAngle [,lerp])\nPhaser.Math.Angle.ShortestBetween(angle1, angle2)\nPhaser.Math.Angle.Wrap(angle)\nPhaser.Math.Angle.WrapDegrees(angle)\n```\n\n### Distance\n\n> 距离\n\n```js\nPhaser.Math.Distance.Between(x1, y1, x2, y2)\nPhaser.Math.Distance.Power(x1, y1, x2, y2, pow)\nPhaser.Math.Distance.Squared(x1, y1, x2, y2)\n```\n\n### Easing\n\n> 动画曲线\n\n1. Phaser.Math.Easing.Back\n\n   > 返回效果\n\n   ```js\n   Phaser.Math.Easing.Back.In(v [,overshoot])\n   Phaser.Math.Easing.Back.InOut(v [,overshoot])\n   Phaser.Math.Easing.Back.Out(v [,overshoot])\n   ```\n\n1. Phaser.Math.Easing.Bounce\n\n   > 反弹\n\n   ```js\n   Phaser.Math.Easing.Bounce.In(v)\n   Phaser.Math.Easing.Bounce.InOut(v)\n   Phaser.Math.Easing.Bounce.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Circular\n\n   > 圆形\n\n   ```js\n   Phaser.Math.Easing.Circular.In(v)\n   Phaser.Math.Easing.Circular.InOut(v)\n   Phaser.Math.Easing.Circular.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Cubic\n\n   > 立方\n\n   ```js\n   Phaser.Math.Easing.Cubic.In(v)\n   Phaser.Math.Easing.Cubic.InOut(v)\n   Phaser.Math.Easing.Cubic.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Elastic\n\n   > 有弹性的\n\n   ```js\n   Phaser.Math.Easing.Elastic.In(v [,amplitude] [,period])\n   Phaser.Math.Easing.Elastic.InOut(v [,amplitude] [,period])\n   Phaser.Math.Easing.Elastic.Out(v [,amplitude] [,period])\n   ```\n\n1. Phaser.Math.Easing.Expo\n\n   ```js\n   Phaser.Math.Easing.Expo.In(v)\n   Phaser.Math.Easing.Expo.InOut(v)\n   Phaser.Math.Easing.Expo.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Linear\n\n   > 线性\n\n   ```js\n   Phaser.Math.Easing.Linear(v)\n   ```\n\n1. Phaser.Math.Easing.Quadratic\n\n   > 二次方程\n\n   ```js\n   Phaser.Math.Easing.Quadratic.In(v)\n   Phaser.Math.Easing.Quadratic.InOut(v)\n   Phaser.Math.Easing.Quadratic.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Quartic\n\n   > 四次方程\n\n   ```js\n   Phaser.Math.Easing.Quartic.In(v)\n   Phaser.Math.Easing.Quartic.InOut(v)\n   Phaser.Math.Easing.Quartic.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Quintic\n\n   > 五次方程\n\n   ```js\n   Phaser.Math.Easing.Quintic.In(v)\n   Phaser.Math.Easing.Quintic.InOut(v)\n   Phaser.Math.Easing.Quintic.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Sine\n\n   > 正弦\n\n   ```js\n   Phaser.Math.Easing.Sine.In(v)\n   Phaser.Math.Easing.Sine.InOut(v)\n   Phaser.Math.Easing.Sine.Out(v)\n   ```\n\n1. Phaser.Math.Easing.Stepped\n\n   > 阶梯式\n\n   ```js\n   Phaser.Math.Easing.Stepped(v [,steps])\n   ```\n\n### Fuzzy\n\n> 模糊\n\n```js\nPhaser.Math.Fuzzy.Ceil(value [,epsilon]) // 模糊上限\nPhaser.Math.Fuzzy.Equal(a, b [,epsilon]) // 差值内模糊相等\nPhaser.Math.Fuzzy.Floor(value [,epsilon]) // 模糊下限\nPhaser.Math.Fuzzy.GreaterThan(a, b [,epsilon]) // a > b - epsilon 为 true\nPhaser.Math.Fuzzy.LessThan(a, b [,epsilon]) // a < b + epsilon 为 true\n```\n\n### Interpolation\n\n> 插入\n\n```js\nPhaser.Math.Interpolation.Bezier(v, k)\nPhaser.Math.Interpolation.CatmullRom(v, k)\nPhaser.Math.Interpolation.CubicBezier(t, p0, p1, p2, p3)\nPhaser.Math.Interpolation.Linear(v, k)\nPhaser.Math.Interpolation.QuadraticBezier(t, p0, p1, p2)\nPhaser.Math.Interpolation.SmootherStep(t, min, max)\nPhaser.Math.Interpolation.SmoothStep(t, min, max)\n```\n\n### Pow2\n\n```js\nPhaser.Math.Pow2.GetNext(value) // 返回给定值的最近的幂值\nPhaser.Math.Pow2.IsSize(width, height) // 检查宽度与高度是否为2的幂\nPhaser.Math.Pow2.IsValue(value) // 是否是2的幂\n```\n\n### Snap\n\n> 提前\n\n```js\nPhaser.Math.Snap.Ceil(value, gap [,start] [,divide]) // 网格切片取值\nPhaser.Math.Snap.Floor(value, gap [,start] [,divide]) // 网格切片取值\nPhaser.Math.Snap.To(value, gap [,start] [,divide]) // 网格切片取值\n```\n\n### RND\n\n> 种子随机数\n\n```js\nPhaser.Math.RND.angle() // -180 到 180 度，随机一个角度\nPhaser.Math.RND.rotation() // 随机返回一个弧度 -3.141 和 3.141 之间\nPhaser.Math.RND.between(min, max) // 介于之间的随机整数，包括最小值和最大值\nPhaser.Math.RND.integerInRange(min, max) // 同 between\nPhaser.Math.RND.frac() // 随机生成0 到 1的实数\nPhaser.Math.RND.init(seeds) // 初始化种子\nPhaser.Math.RND.integer() // 返回 0 到 2^32 之间的随机整数\nPhaser.Math.RND.normal() // -1 到 1 的随机实数\nPhaser.Math.RND.pick(array) // 从给定数组中随机返回一个元素\nPhaser.Math.RND.real() // 返回 0 到 2 ^ 32 之间的随机实数\nPhaser.Math.RND.realInRange(min, max) // 返回之间的随机实数\nPhaser.Math.RND.shuffle(array) // 对数组重新排序\nPhaser.Math.RND.sign() // 返回 -1 或 1\nPhaser.Math.RND.sow(seeds) // 重置随机种子\nPhaser.Math.RND.state([state]) // 获取或设置生成器的状态，保存与还原数据\nPhaser.Math.RND.timestamp(min, max) // 默认返回2000年初到2020年底的时间戳\nPhaser.Math.RND.uuid() // 返回一个 https://gist.github.com/1308368 RFC4122版本4 ID 十六进制字符串\nPhaser.Math.RND.weightedPick(array) // 随机返回一个元素，利于前面的条目\n```\n\n## Phaser.Physics\n\n> 太多了，后面慢慢加\n\n## Phaser.Plugins\n\n```js\nPhaser.Plugins.PluginCache.destroyCorePlugins()\nPhaser.Plugins.PluginCache.destroyCustomPlugins()\nPhaser.Plugins.PluginCache.getCore(key)\nPhaser.Plugins.PluginCache.getCustom(key)\nPhaser.Plugins.PluginCache.getCustomClass(key)\nPhaser.Plugins.PluginCache.hasCore(key)\nPhaser.Plugins.PluginCache.hasCustom(key)\nPhaser.Plugins.PluginCache.register(key, plugin, mapping [,custom])\nPhaser.Plugins.PluginCache.registerCustom(key, plugin, mapping, data)\nPhaser.Plugins.PluginCache.remove(key)\nPhaser.Plugins.PluginCache.removeCustom(key)\n```\n\n## Phaser.Renderer\n\n### Canvas\n\n```js\nPhaser.Renderer.Canvas.GetBlendModes()\nPhaser.Renderer.Canvas.SetTransform(renderer, ctx, src, camera [,parentMatrix])\n```\n\n### WebGL\n\n```js\nPhaser.Renderer.WebGL.Utils.getComponentCount(attributes, glContext)\nPhaser.Renderer.WebGL.Utils.getFloatsFromUintRGB(rgb)\nPhaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha(rgb, a)\nPhaser.Renderer.WebGL.Utils.getTintAppendFloatAlphaAndSwap(rgb, a)\nPhaser.Renderer.WebGL.Utils.getTintFromFloats(r, g, b, a)\n```\n\n### Snapshot\n\n```js\nPhaser.Renderer.Snapshot.Canvas(sourceCanvas, config)\nPhaser.Renderer.Snapshot.WebGL(sourceCanvas, config)\n```\n\n## Phaser.Scale\n\n> 暂无\n\n## Phaser.ScaleModes\n\n> 暂无\n\n## Phaser.Scenes\n\n> 暂无\n\n## Phaser.Sound\n\n> 暂无\n\n## Phaser.Structs\n\n```js\nPhaser.Structs.List()\nPhaser.Structs.Map()\nPhaser.Structs.ProcessQueue()\nPhaser.Structs.RTree()\nPhaser.Structs.Set()\nPhaser.Structs.Size()\n```\n\n## Phaser.Textures\n\n## Phaser.Tilemaps\n\n### Parsers\n\n```js\nPhaser.Tilemaps.Parsers.Parse(\n  name,\n  mapFormat,\n  data,\n  tileWidth,\n  tileHeight,\n  insertNull\n)\nPhaser.Tilemaps.Parsers.Parse2DArray(\n  name,\n  data,\n  tileWidth,\n  tileHeight,\n  insertNull\n)\nPhaser.Tilemaps.Parsers.ParseCSV(name, data, tileWidth, tileHeight, insertNull)\n```\n\n## Phaser.Time\n\n> 暂无\n\n## Phaser.Tweens\n\n> 暂无\n\n### Builders\n\n```js\nPhaser.Tweens.Builders.GetBoolean(source, key, defaultValue)\nPhaser.Tweens.Builders.GetEaseFunction(ease [, easeParams])\nPhaser.Tweens.Builders.GetNewValue(source, key, defaultValue)\nPhaser.Tweens.Builders.GetProps(config)\nPhaser.Tweens.Builders.GetTargets(config)\nPhaser.Tweens.Builders.GetTweens(config)\nPhaser.Tweens.Builders.GetValueOp(key, propertyValue)\nPhaser.Tweens.Builders.NumberTweenBuilder(parent, config, defaults)\nPhaser.Tweens.Builders.StaggerBuilder(value [, config])\nPhaser.Tweens.Builders.TimelineBuilder(manager, config)\nPhaser.Tweens.Builders.TweenBuilder(parent, config, defaults)\n```\n\n## Phaser.Utils\n\n```js\nPhaser.Utils.NOOP()\n```\n\n### Array\n\n```js\nPhaser.Utils.Array.Add(array, item [, limit] [, callback] [, context])\nPhaser.Utils.Array.AddAt(array, item [, index] [, limit] [, callback] [, context])\nPhaser.Utils.Array.BringToTop(array, item)\nPhaser.Utils.Array.CountAllMatching(array, property, value [, startIndex] [, endIndex])\nPhaser.Utils.Array.Each(array, callback, context [, args])\nPhaser.Utils.Array.EachInRange(array, callback, context, startIndex, endIndex [, args])\nPhaser.Utils.Array.FindClosestInSorted(value, array [, key])\nPhaser.Utils.Array.GetAll(array [, property] [, value] [, startIndex] [, endIndex])\nPhaser.Utils.Array.GetFirst(array [, property] [, value] [, startIndex] [, endIndex])\nPhaser.Utils.Array.GetRandom(array [, startIndex] [, length])\nPhaser.Utils.Array.MoveDown(array, item)\nPhaser.Utils.Array.MoveTo(array, item, index)\nPhaser.Utils.Array.MoveUp(array, item)\nPhaser.Utils.Array.NumberArray(start, end [, prefix] [, suffix])\nPhaser.Utils.Array.NumberArrayStep( [start] [, end] [, step])\nPhaser.Utils.Array.QuickSelect(arr, k [, left] [, right] [, compare])\nPhaser.Utils.Array.Range(a, b [, options])\nPhaser.Utils.Array.Remove(array, item [, callback] [, context])\nPhaser.Utils.Array.RemoveAt(array, index [, callback] [, context])\nPhaser.Utils.Array.RemoveBetween(array, startIndex, endIndex [, callback] [, context])\nPhaser.Utils.Array.RemoveRandomElement(array [, start] [, length])\nPhaser.Utils.Array.Replace(array, oldChild, newChild)\nPhaser.Utils.Array.RotateLeft(array [, total])\nPhaser.Utils.Array.RotateRight(array [, total])\nPhaser.Utils.Array.SafeRange(array, startIndex, endIndex [, throwError])\nPhaser.Utils.Array.SendToBack(array, item)\nPhaser.Utils.Array.SetAll(array, property, value [, startIndex] [, endIndex])\nPhaser.Utils.Array.Shuffle(array)\nPhaser.Utils.Array.SpliceOne(array, index)\nPhaser.Utils.Array.StableSort(arr, comp)\nPhaser.Utils.Array.Swap(array, item1, item2)\n```\n\n### Base64\n\n```js\nPhaser.Utils.Base64.ArrayBufferToBase64(arrayBuffer [, mediaType])\nPhaser.Utils.Base64.Base64ToArrayBuffer(base64)\n```\n\n### Objects\n\n```js\nPhaser.Utils.Objects.Clone(obj)\nPhaser.Utils.Objects.Extend()\nPhaser.Utils.Objects.GetAdvancedValue(source, key, defaultValue)\nPhaser.Utils.Objects.GetFastValue(source, key [, defaultValue])\nPhaser.Utils.Objects.GetMinMaxValue(source, key, min, max, defaultValue)\nPhaser.Utils.Objects.GetValue(source, key, defaultValue)\nPhaser.Utils.Objects.HasAll(source, keys)\nPhaser.Utils.Objects.HasAny(source, keys)\nPhaser.Utils.Objects.HasValue(source, key)\nPhaser.Utils.Objects.IsPlainObject(obj)\nPhaser.Utils.Objects.Merge(obj1, obj2)\nPhaser.Utils.Objects.MergeRight(obj1, obj2)\nPhaser.Utils.Objects.Pick(object, keys)\nPhaser.Utils.Objects.SetValue(source, key, value)\n```\n\n### String\n\n```js\nPhaser.Utils.String.Format(string, values)\nPhaser.Utils.String.Pad(str [, len] [, pad] [, dir])\nPhaser.Utils.String.Reverse(string)\nPhaser.Utils.String.UppercaseFirst(str)\nPhaser.Utils.String.UUID()\n```\n"}))}],ee=[{path:"/",exact:!0,component:({location:e,history:n})=>(I(()=>{const a=o(e.search).get("redirect");a?n.push(decodeURIComponent(a).replace("/phaser3/","")):n.push("/home")},[]),t.createElement(t.Fragment,null))},{path:"/404",exact:!0,component:()=>t.createElement("h1",null,"404")},{path:"/",exact:!1,component:({routes:e,location:n,history:a})=>{const[s,o]=_(!1);return t.createElement(r.Layout,null,t.createElement(x,null,t.createElement("div",{className:"phaser3-logo"},t.createElement(r.Icon,{type:s?"menu-unfold":"menu-fold",onClick:()=>{o(!s)}})," ","Phaser3 笔记")),t.createElement(r.Layout,null,t.createElement(L,{trigger:null,breakpoint:"lg",width:"256",collapsedWidth:0,collapsed:s,onCollapse:e=>{o(e)}},t.createElement(f,null)),t.createElement(j,{className:"phaser3-content markdown-body"},t.createElement(r.BackTop,{target:()=>window.document.querySelector(".phaser3-content")}),t.createElement(C,{routes:e})),t.createElement(L,{collapsed:s,collapsedWidth:0},t.createElement(b,null))))},routes:[...$.filter(e=>!e.hidden),{redirect:!0,from:"*",to:"/404"}]}];s.render(t.createElement(r.ConfigProvider,{locale:T.a},t.createElement(e=>{const[n,a]=d(E,m),s={state:n,dispatch:a};return t.createElement(u.Provider,{value:s},e.children)},null,t.createElement(()=>t.createElement(A.BrowserRouter,{basename:"/phaser3"},t.createElement(C,{routes:ee})),null))),document.getElementById("app"))}]);